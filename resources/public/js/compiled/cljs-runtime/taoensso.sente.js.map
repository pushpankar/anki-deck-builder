{"version":3,"sources":["taoensso/sente.cljc"],"mappings":"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","names":["taoensso.sente/sente-version","taoensso.sente/node-target?","cljs.core._EQ_","cljs.core/*target*","taoensso.sente/set-min-log-level!","level","taoensso.timbre/swap-config!","config__26453__auto__","taoensso.timbre/set-ns-min-level","js/taoensso","js/taoensso.sente","js/taoensso.sente.__set-default-log-level","taoensso.sente/__set-default-log-level","taoensso.sente/strim","max-len","s","cljs.core/count","taoensso.encore/substr","var_args","G__31058","taoensso.sente/lid","js/Error","uid","client-id","taoensso.sente.lid","conn-id","taoensso.sente/expected","expected","x","cljs.core/type","taoensso.sente/validate-event","cljs.core/vector?","cljs.core/not","G__31060","fexpr__31059","vec__31061","cljs.core.nth","ev-id","_","cljs.core/Keyword","cljs.core/namespace","taoensso.sente/assert-event","temp__5804__auto__","errs","cljs.core.ex_info","taoensso.sente/event?","taoensso.sente/as-event","temp__5802__auto__","taoensso.sente/client-event-msg?","and__5000__auto__","cljs.core/map?","taoensso.encore/ks>=","map__31064","cljs.core/--destructure-map","cljs.core.get","ch-recv","send-fn","state","event","taoensso.encore/chan?","cljs.core/ifn?","taoensso.encore/atom?","taoensso.sente/server-event-msg?","map__31065","connected-uids","send-buffers","ring-req","?reply-fn","taoensso.encore/nblank-str?","p__31066","map__31067","taoensso.sente/put-server-event-msg>ch-recv!","ev-msg","vec__31068","ev-?data","valid-event","ev-msg*","cljs.core.merge","cljs.core.async.put_BANG_","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","taoensso.sente/cb-error?","cb-reply-clj","fexpr__31071","taoensso.sente/cb-success?","taoensso.sente/parse-packed","packed","taoensso.encore/str-starts-with?","cljs.core.subs","taoensso.sente/unpack","packer","vec__31072","vec__31075","?format","unpacked","e31078","taoensso.sente.interfaces/unpack","t","clj","?cb-uuid","G__31079","taoensso.sente/*write-legacy-pack-format?*","G__31081","taoensso.sente/pack","taoensso.sente.pack","taoensso.sente.interfaces/pack","temp__5806__auto__","cb-uuid","taoensso.truss.impl/-invar-violation!","cljs.core/PROTOCOL_SENTINEL","this__5287__auto__","writer__5288__auto__","opt__5289__auto__","cljs.core/-write","taoensso.sente/EdnPacker","taoensso.sente/->EdnPacker","taoensso.encore/pr-edn","taoensso.encore.read_edn","taoensso.sente/default-edn-packer","taoensso.sente/coerce-packer","e","p1__31082#","taoensso.truss.impl/-dummy-error","e31083","cljs.core/native-satisfies?","taoensso.sente.interfaces/IPacker","taoensso.sente/next-idx!","taoensso.encore.counter","taoensso.sente/allow-origin?","allowed-origins","headers","origin","have-origin?","cljs.core.not_EQ_","cljs.core/contains?","cljs.core/set","referer","p1__31085#","taoensso.encore.rsome","clojure.string/starts-with?","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","taoensso.sente/make-channel-socket-server!","p__31089","vec__31090","map__31093","seq31087","G__31088","cljs.core/first","cljs.core/next","self__5711__auto__","web-server-ch-adapter","recv-buf-or-n","ws-kalive-ms","lp-timeout-ms","ws-ping-timeout-ms","send-buf-ms-ajax","send-buf-ms-ws","user-id-fn","bad-csrf-fn","bad-origin-fn","csrf-token-fn","handshake-data-fn","authorized?-fn","unauthorized-fn","?unauthorized-fn","ms-allow-reconnect-before-close-ws","ms-allow-reconnect-before-close-ajax","cljs.core.async/sliding-buffer","taoensso.encore.ms","cljs.core.get_in","_ring-req","or__5002__auto__","e31094","e31095","taoensso.encore/pos-int?","p1__31086#","e31096","taoensso.sente.interfaces/IServerChanAdapter","max-ms","taoensso.sente/default-client-side-ajax-timeout-ms","fexpr__31098","cljs.core/set?","cljs.core.async.chan","G__31099","cljs.core.assoc","conns_","cljs.core.atom","send-buffers_","connected-uids_","connect-uid!?","conn-type","newly-connected?","taoensso.encore.swap_in_BANG_","p__31100","map__31101","ws","ajax","any","old-m","new-m","G__31102","cljs.core.conj","taoensso.encore/swapped","old-any","new-any","maybe-disconnect-uid!?","newly-disconnected?","p__31103","map__31104","cljs.core/deref","conns'","any-ws-clients?","any-ajax-clients?","any-clients?","cljs.core.disj","p__31105","vec__31106","map__31109","user-id","ev","opts","flush?","ev-uuid","taoensso.encore.uuid_str","flush-buffer!","pulled","m","vec__31110","ev-uuids","cljs.core.dissoc","vec__31113","buffered-evs","buffered-evs-ppstr","G__31116","G__31117","G__31118","G__31119","G__31120","taoensso.sente/send-buffered-server-evs>clients!","seq__31121","cljs.core/seq","chunk__31122","count__31123","i__31124","vec__31131","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","vec__31134","?sch","_udt","cljs.core/vals","sch","taoensso.sente.interfaces/sch-close!","seq__31137","chunk__31138","count__31139","i__31140","vec__31147","vec__31150","seq__31153","chunk__31154","count__31155","i__31156","?v","vec__31163","vec__31166","ws-timeout","cljs.core.async/timeout","ajax-timeout","c__21734__auto__","cljs.core.async.impl.dispatch/run","f__21735__auto__","switch__21664__auto__","state_31173","state_val_31174","cljs.core.async.impl.ioc-helpers/take!","inst_31170","inst_31171","statearr-31175","cljs.core.async.impl.ioc-helpers/return-chan","statearr-31176","state-machine__21665__auto__","ret-value__21666__auto__","result__21667__auto__","cljs.core/keyword-identical?","ex__21668__auto__","e31177","statearr-31178","statearr-31179","state__21736__auto__","statearr-31180","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","state_31185","state_val_31186","inst_31182","inst_31183","statearr-31187","statearr-31188","e31189","statearr-31190","statearr-31191","statearr-31192","bad-csrf?","reference-csrf-token","csrf-token-from-client","taoensso.encore/const-str=","unauthorized?","possible-rejection-resp","b2__22168__auto__","unauthorized-resp","uf","ev-msg-const","taoensso$sente$ring_handler","?ring-async-resp-fn","?ring-async-raise-fn","b2__22159__auto__","resp","taoensso.sente.interfaces/ring-req->server-ch-resp","server-ch","websocket?","vec__31193","params","ppstr","has-cb?","reply-fn","replied?_","resp-clj","cljs.core/compare-and-set!","taoensso.sente.interfaces/sch-send!","ms","state_31201","state_val_31202","inst_31196","inst_31198","inst_31199","statearr-31203","statearr-31204","e31205","statearr-31206","statearr-31207","statearr-31208","lid*","clojure.string/blank?","err-msg","receive-event-msg!","taoensso$sente$ring_handler_$_self","send-handshake!?","?handshake-data","handshake-ev","on-error","error","on-msg","req-ppstr","p__31209","vec__31210","taoensso.encore/now-udt","vec__31213","on-close","_status","log-prefix","active-conn-closed?","p__31216","vec__31217","conn-id*","state_31271","state_val_31272","statearr-31273","statearr-31274","statearr-31275","statearr-31276","inst_31223","inst_31224","inst_31236","inst_31235","inst_31237","inst_31257","vec__31227","inst_31258","inst_31259","inst_31260","cljs.core/PersistentVector","inst_31261","inst_31262","inst_31263","statearr-31277","statearr-31278","statearr-31279","statearr-31280","inst_31266","statearr-31281","statearr-31282","inst_31250","inst_31251","inst_31252","inst_31253","inst_31254","inst_31255","statearr-31283","statearr-31284","statearr-31285","statearr-31286","inst_31243","statearr-31287","statearr-31288","inst_31226","inst_31230","inst_31231","inst_31232","inst_31234","statearr-31292","statearr-31293","statearr-31294","inst_31269","statearr-31295","statearr-31296","inst_31245","inst_31246","inst_31247","inst_31248","statearr-31297","statearr-31298","statearr-31299","statearr-31300","e31301","statearr-31302","statearr-31303","statearr-31304","active-conn-disconnected?","?conn-entry","p__31233","vec__31289","_?sch","m-clients","cljs.core/empty?","on-open","vec__31305","udt-open","state_31421","state_val_31422","inst_31397","inst_31396","inst_31395","inst_31398","inst_31399","inst_31400","inst_31401","statearr-31423","statearr-31424","statearr-31425","inst_31362","inst_31363","inst_31364","inst_31365","cljs.core/PersistentHashMap","statearr-31426","statearr-31427","inst_31327","inst_31375","inst_31376","inst_31377","statearr-31428","inst_31308","inst_31309","inst_31310","inst_31311","inst_31312","statearr-31429","statearr-31430","inst_31381","inst_31382","inst_31383","statearr-31431","inst_31325","inst_31316","inst_31321","inst_31322","inst_31323","inst_31324","inst_31326","inst_31328","inst_31329","statearr-31432","statearr-31433","statearr-31434","inst_31352","statearr-31435","statearr-31436","inst_31367","inst_31368","statearr-31437","statearr-31438","inst_31417","statearr-31439","inst_31409","map__31320","vec__31317","inst_31410","inst_31411","inst_31412","statearr-31440","statearr-31441","statearr-31442","inst_31346","statearr-31443","statearr-31444","inst_31387","statearr-31445","statearr-31446","statearr-31447","inst_31335","statearr-31448","statearr-31449","inst_31379","statearr-31450","inst_31385","statearr-31451","inst_31415","statearr-31452","inst_31354","inst_31355","inst_31356","statearr-31453","inst_31419","statearr-31454","inst_31314","statearr-31455","statearr-31456","inst_31389","statearr-31457","inst_31342","inst_31343","statearr-31458","statearr-31459","statearr-31460","inst_31331","inst_31332","inst_31333","statearr-31461","inst_31348","inst_31349","inst_31350","statearr-31462","inst_31371","inst_31372","inst_31373","statearr-31463","inst_31391","statearr-31464","inst_31405","inst_31406","inst_31407","statearr-31465","statearr-31466","statearr-31467","inst_31393","statearr-31468","inst_31358","inst_31359","inst_31360","statearr-31469","statearr-31470","statearr-31471","inst_31337","inst_31338","inst_31339","statearr-31472","statearr-31473","e31474","statearr-31475","statearr-31476","statearr-31477","udt-t0","ms-timeout","expecting-pong?","udt-t1","recur?","udt","force-close?","taoensso.sente.interfaces/sch-open?","send-handshake?","vec__31478","state_31510","state_val_31511","inst_31481","inst_31488","inst_31483","inst_31484","inst_31485","inst_31486","inst_31487","statearr-31512","statearr-31513","statearr-31514","inst_31495","inst_31493","inst_31494","inst_31496","statearr-31515","statearr-31516","statearr-31517","statearr-31518","inst_31508","inst_31498","vec__31490","inst_31499","inst_31500","inst_31501","inst_31502","statearr-31519","statearr-31520","statearr-31521","inst_31505","statearr-31522","statearr-31523","e31524","statearr-31525","statearr-31526","statearr-31527","taoensso.sente/*simulated-bad-conn-rate*","taoensso.sente/simulated-bad-conn?","sbcr","taoensso.encore/chance","buffered-evs-pstr","n-buffered-evs","taoensso.truss.impl/ensure-set","e31528","ms-backoffs","client-ids","cljs.core/keys","state_31562","state_val_31563","inst_31540","inst_31531","inst_31534","inst_31542","inst_31543","inst_31544","inst_31545","inst_31546","inst_31547","statearr-31564","inst_31529","inst_31530","statearr-31565","statearr-31566","inst_31535","statearr-31567","statearr-31568","statearr-31569","statearr-31570","inst_31560","inst_31533","statearr-31578","statearr-31579","statearr-31580","inst_31558","statearr-31581","inst_31538","statearr-31582","inst_31554","inst_31555","statearr-31583","statearr-31584","inst_31549","inst_31550","inst_31551","inst_31552","statearr-31585","e31586","statearr-31587","statearr-31588","statearr-31589","pending","idx","cljs.core.reduce","sent?","vec__31571","p__31574","vec__31575","done?","n-desired","n-success","cljs.core/rand-int","taoensso.sente/ajax-call","taoensso.encore/ajax-call","taoensso$sente$IChSocket$_chsk_connect_BANG_$dyn","x__5350__auto__","m__5351__auto__","taoensso.sente/-chsk-connect!","goog/typeOf","m__5349__auto__","cljs.core/missing-protocol","taoensso$sente$IChSocket$_chsk_disconnect_BANG_$dyn","taoensso.sente/-chsk-disconnect!","taoensso$sente$IChSocket$_chsk_reconnect_BANG_$dyn","taoensso.sente/-chsk-reconnect!","taoensso$sente$IChSocket$_chsk_break_connection_BANG_$dyn","taoensso.sente/-chsk-break-connection!","taoensso$sente$IChSocket$_chsk_send_BANG_$dyn","taoensso.sente/-chsk-send!","taoensso.sente/IChSocket","chsk","reason","taoensso.sente/chsk-connect!","taoensso.sente/chsk-disconnect!","taoensso.sente/chsk-reconnect!","G__31591","taoensso.sente/chsk-break-connection!","p__31592","map__31593","close-ws?","G__31595","taoensso.sente/chsk-send!","taoensso.sente.chsk_send_BANG_","?timeout-ms","?cb","cljs.core/boolean","taoensso.sente/chsk-send->closed!","?cb-fn","taoensso.sente/assert-send-args","taoensso.encore/nat-int?","taoensso.sente/pull-unused-cb-fn!","cbs-waiting_","?f","taoensso.sente/swap-chsk-state!","f","vec__31596","old-state","new-state","old-open?","new-open?","open-changed?","opened?","closed?","first-open?","taoensso.encore.assoc_when","output","taoensso.sente/chsk-state->closed","e31599","e31600","closing?","taoensso.sente/cb-chan-as-fn","e31601","vec__31602","cb-ch","reply","cljs.core.keyword","taoensso.encore/as-qname","taoensso.sente/receive-buffered-evs!","chs","seq__31605","chunk__31606","count__31607","i__31608","vec__31615","vec__31618","id","taoensso.sente/handshake?","vec__31621","x1","taoensso.sente/receive-handshake!","chsk-type","e31624","e31625","vec__31626","vec__31629","map__31632","?uid","ever-opened?_","first-handshake?","taoensso.sente/?node-npm-websocket_","make-package-name","prefix","require-fn","js/require","cljs.core/constantly","e31633","G__31634","p__31635","map__31636","taoensso.sente/make-client-ws-js","uri-str","on-message","binary-type","WebSocket","taoensso.encore.oget","goog/global","socket","G__31637","bt","p__31638","map__31639","taoensso.sente/default-client-ws-constructor","taoensso.sente/get-client-csrf-token-str","warn?","token-or-fn","dynamic?","cljs.core/fn?","token","taoensso.encore/as-?nblank","taoensso.sente/client-unloading?_","e31640","cljs.core/reset!","taoensso.sente/retry-connect-chsk!","backoff-ms-fn","connect-fn","retry-count","backoff-ms","udt-next-reconnect","p1__31641#","this__5300__auto__","k__5301__auto__","this__5302__auto__","k31647","else__5303__auto__","G__31651","url","state_","conn-id_","retry-count_","ws-opts","socket_","udt-last-comms_","ws-constructor","__extmap","this__5320__auto__","f__5321__auto__","init__5322__auto__","ret__5323__auto__","p__31652","vec__31653","k__5324__auto__","v__5325__auto__","this__5315__auto__","writer__5316__auto__","opts__5317__auto__","pr-pair__5318__auto__","keyval__5319__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","G__31646","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5298__auto__","__meta","this__5295__auto__","__hash","this__5304__auto__","this__5296__auto__","h__5111__auto__","coll__5297__auto__","cljs.core/hash-unordered-coll","this31648","other31649","this__5310__auto__","k__5311__auto__","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5307__auto__","G__31656","this__5308__auto__","k__5309__auto__","pred__31657","expr__31658","this__5313__auto__","cljs.core/MapEntry","this__5299__auto__","this__5305__auto__","entry__5306__auto__","cljs.core/-nth","cljs.core/-conj","taoensso.sente/ChWebSocket","this__5346__auto__","cljs.core/List","writer__5347__auto__","G__31650","extmap__5342__auto__","G__31760","cljs.core/record?","taoensso.sente/->ChWebSocket","taoensso.sente/map->ChWebSocket","p1__31642#","vec__31660","_sid","map__31663","ws-code","vec__31664","taoensso.encore.reset_in_BANG_","map__31667","timeout-ms","state_31678","state_val_31679","inst_31668","inst_31671","inst_31670","statearr-31680","statearr-31681","statearr-31682","inst_31673","statearr-31683","statearr-31684","inst_31676","statearr-31685","e31686","statearr-31687","statearr-31688","statearr-31689","vec__31690","e31693","cb-fn*","this-conn-id","own-conn?","this-socket-id","own-socket?","vec__31694","_s","sid","retry-fn","cljs.core.swap_BANG_","cljs.core/inc","ws-ev","e31697","cljs.core.js__GT_clj","p1__31643#","vec__31698","cb-fn","last-ws-close","reason*","p1__31645#","?new-socket_","e31701","G__31702","taoensso.encore/merge-url-with-query-string","new-socket_","new-socket","e31703","cljs.core/force","vec__31704","old-s","_old-sid","state_31738","state_val_31739","inst_31734","statearr-31740","statearr-31741","inst_31711","inst_31712","statearr-31742","statearr-31743","statearr-31744","statearr-31745","inst_31736","inst_31708","inst_31709","statearr-31746","statearr-31747","inst_31714","inst_31715","statearr-31748","statearr-31749","statearr-31750","inst_31730","statearr-31751","statearr-31752","inst_31717","inst_31718","inst_31719","inst_31720","inst_31721","inst_31722","inst_31723","inst_31724","inst_31725","inst_31726","inst_31727","statearr-31753","statearr-31754","statearr-31755","e31756","statearr-31757","statearr-31758","statearr-31759","no-activity?","taoensso.sente/new-ChWebSocket","csrf-token","k31767","G__31771","ajax-opts","curr-xhr_","p__31772","vec__31773","G__31766","this31768","other31769","G__31776","pred__31777","expr__31778","taoensso.sente/ChAjaxSocket","G__31770","G__31797","taoensso.sente/->ChAjaxSocket","taoensso.sente/map->ChAjaxSocket","p1__31761#","_opts","map__31780","csrf-token-str","G__31781","G__31782","G__31783","p__31784","map__31785","?error","?content","p1__31762#","vec__31786","content","resp-ppstr","p1__31763#","poll-fn","retry-count*","G__31789","G__31790","G__31791","xhr","p__31792","map__31793","p1__31764#","vec__31794","handshake?","p1__31765#","taoensso.sente/new-ChAjaxSocket","k31799","G__31803","ws-chsk-opts","ajax-chsk-opts","impl_","p__31804","vec__31805","G__31798","this31800","other31801","G__31808","pred__31809","expr__31810","taoensso.sente/ChAutoSocket","G__31802","G__31813","taoensso.sente/->ChAutoSocket","taoensso.sente/map->ChAutoSocket","impl","map__31812","ajax-chsk!","ajax-chsk","cljs.core/remove-watch","ws-chsk!","ws-chsk","downgraded?_","cljs.core/add-watch","state-changed?","never-opened?","ws-error","taoensso.sente/new-ChAutoSocket","taoensso.sente/get-chsk-url","protocol","host","path","type","G__31814","e31815","G__31816","G__31817","taoensso.encore.path","taoensso.sente/make-channel-socket-client!","p__31821","vec__31822","map__31825","seq31818","G__31819","G__31820","?csrf-token-or-fn","port","wrap-recv-evs?","taoensso.encore/exp-backoff","_deprecated-more-opts","e31826","e31827","vec__31828","ws-url","ajax-url","win-loc","taoensso.encore/get-win-loc","z","e31831","taoensso.truss.impl/WrappedError","private-chs","buf","cljs.core.map","common-chsk-opts","auto-chsk-opts","?chsk","G__31832","chsk-state_","internal-ch","cljs.core.partial","ev-ch","cljs.core.async.merge","ev-msg-ch","vec__31833","cljs.core.async.pipe","taoensso.sente/-start-chsk-router!","server?","event-msg-handler","map__31836","trace-evs?","error-handler","simple-auto-threading?","ch-ctrl","execute1","state_31867","state_val_31868","inst_31853","statearr-31869","statearr-31870","statearr-31871","statearr-31872","inst_31845","inst_31847","inst_31848","inst_31846","statearr-31873","statearr-31874","statearr-31875","inst_31851","statearr-31876","inst_31865","inst_31841","inst_31842","inst_31843","cljs.core.async/ioc-alts!","inst_31857","inst_31858","inst_31859","vec__31838","map__31856","inst_31860","statearr-31882","statearr-31883","statearr-31884","inst_31863","statearr-31885","statearr-31886","statearr-31887","e31888","statearr-31889","statearr-31890","statearr-31891","v","p","stop?","event-msg","e31877","G__31879","e31880","e31881","t1","e31878","eh","t2","cljs.core.async/close!","taoensso.sente/start-server-chsk-router!","p__31895","vec__31896","map__31899","seq31892","G__31893","G__31894","taoensso.sente/start-client-chsk-router!","p__31903","vec__31904","map__31907","seq31900","G__31901","G__31902","taoensso.sente/event-msg?","taoensso.sente/make-channel-socket!","taoensso.sente/start-chsk-router!","taoensso.sente/start-chsk-router-loop!","event-handler","G__31908","G__31909","taoensso.sente/set-logging-level!","taoensso.timbre/set-level!","taoensso.sente/ajax-lite","taoensso.sente/default-chsk-url-fn","p__31910","map__31911","location","pathname"],"sourcesContent":["(ns taoensso.sente\n  \"Channel sockets for Clojure/Script.\n\n      Protocol  | client>server | client>server ?+ ack/reply | server>user push\n    * WebSockets:       \u2713              [1]                           \u2713\n    * Ajax:            [2]              \u2713                           [3]\n\n    [1] Emulate with cb-uuid wrapping\n    [2] Emulate with dummy-cb wrapping\n    [3] Emulate with long-polling\n\n  Abbreviations:\n    * chsk      - Channel socket (Sente's own pseudo \\\"socket\\\")\n    * server-ch - Underlying web server's async channel that implement\n                  Sente's server channel interface\n    * sch       - server-ch alias\n    * uid       - User-id. An application-level user identifier used for async\n                  push. May have semantic meaning (e.g. username, email address),\n                  may not (e.g. client/random id) - app's discretion.\n    * cb        - Callback\n    * tout      - Timeout\n    * ws        - WebSocket/s\n    * pstr      - Packed string. Arbitrary Clojure data serialized as a\n                  string (e.g. edn) for client<->server comms\n    * udt       - Unix timestamp (datetime long)\n\n  Special messages:\n    * Callback wrapping: [<clj> <?cb-uuid>] for [1], [2]\n    * Callback replies: :chsk/closed, :chsk/timeout, :chsk/error\n\n    * Client-side events:\n        [:chsk/ws-ping] ; ws-ping from server\n        [:chsk/handshake [<?uid> nil[4] <?handshake-data> <first-handshake?>]]\n        [:chsk/state     [<old-state-map> <new-state-map> <open-change?>]]\n        [:chsk/recv      <ev-as-pushed-from-server>] ; Server>user push\n\n    * Server-side events:\n        [:chsk/ws-ping] ; ws-ping from client\n        [:chsk/ws-pong] ; ws-pong from client\n        [:chsk/uidport-open  <uid>]\n        [:chsk/uidport-close <uid>]\n        [:chsk/bad-package   <packed-str>]\n        [:chsk/bad-event     <event>]\n\n  Channel socket state map:\n    :type               - e/o #{:auto :ws :ajax}\n    :open?              - Truthy iff chsk appears to be open (connected) now\n    :ever-opened?       - Truthy iff chsk handshake has ever completed successfully\n    :first-open?        - Truthy iff chsk just completed first successful handshake\n    :uid                - User id provided by server on handshake,    or nil\n    :handshake-data     - Arb user data provided by server on handshake\n    :last-ws-error      - ?{:udt _ :ev <WebSocket-on-error-event>}\n    :last-ws-close      - ?{:udt _ :ev <WebSocket-on-close-event>\n                            :clean? _ :code _ :reason _}\n    :last-close         - ?{:udt _ :reason _}, with reason e/o\n                            #{nil :clean :unexpected :requested-disconnect\n                              :requested-reconnect :downgrading-ws-to-ajax\n                              :ws-ping-timeout :ws-error}\n    :udt-next-reconnect - Approximate udt of next scheduled auto-reconnect attempt\n\n  Notable implementation details:\n    * core.async is used liberally where brute-force core.async allows for\n      significant implementation simplifications. We lean on core.async's\n      efficiency here.\n    * For WebSocket fallback we use long-polling rather than HTTP 1.1 streaming\n      (chunked transfer encoding). Http-kit _does_ support chunked transfer\n      encoding but a small minority of browsers &/or proxies do not. Instead of\n      implementing all 3 modes (WebSockets, streaming, long-polling) - it seemed\n      reasonable to focus on the two extremes (performance + compatibility).\n      In any case client support for WebSockets is growing rapidly so fallback\n      modes will become increasingly irrelevant while the extra simplicity will\n      continue to pay dividends.\n\n  General-use notes:\n    * Single HTTP req+session persists over entire chsk session but cannot\n      modify sessions! Use standard a/sync HTTP Ring req/resp for logins, etc.\n    * Easy to wrap standard HTTP Ring resps for transport over chsks. Prefer\n      this approach to modifying handlers (better portability).\n\n  [4] Used to be a csrf-token. Was removed in v1.14 for security reasons.\n  A `nil` remains for limited backwards-compatibility with pre-v1.14 clients.\"\n\n  {:author \"Peter Taoussanis (@ptaoussanis)\"}\n  (:require\n   [clojure.string     :as str]\n   [clojure.core.async :as async :refer [<! >! put! chan go go-loop]]\n   [taoensso.encore    :as enc   :refer [have have! have? swap-in! reset-in! swapped]]\n   [taoensso.timbre    :as timbre]\n   [taoensso.sente.interfaces :as interfaces])\n\n  #?(:cljs (:require-macros [taoensso.sente :as sente-macros :refer [elide-require]]))\n  #?(:clj  (:import [org.java_websocket.client WebSocketClient])))\n\n(enc/assert-min-encore-version [3 133 0])\n(def sente-version \"Useful for identifying client/server mismatch\" [1 20 0])\n\n#?(:cljs (def ^:private node-target? (= *target* \"nodejs\")))\n\n;;;; Logging config\n\n(defn set-min-log-level!\n  \"Sets Timbre's minimum log level for internal Sente namespaces.\n  Possible levels: #{:trace :debug :info :warn :error :fatal :report}.\n  Default level: `:warn`.\"\n  [level]\n  (timbre/set-ns-min-level! \"taoensso.sente.*\" level)\n  (timbre/set-ns-min-level! \"taoensso.sente\"   level)\n  nil)\n\n(defonce ^:private __set-default-log-level (set-min-log-level! :warn))\n\n(defn- strim [^long max-len s]\n  (if (> (count s) max-len)\n    (str (enc/substr s 0 max-len) #_\"+\")\n    (do              s)))\n\n(defn- lid \"Log id\"\n  ([uid                  ] (if (= uid :sente/nil-uid) \"u_nil\" (str \"u_\" (strim 6 (str uid)))))\n  ([uid client-id        ] (str (lid uid)                         \"/c_\" (strim 6 (str client-id))))\n  ([uid client-id conn-id] (str (lid uid client-id)               \"/n_\" (strim 6 conn-id))))\n\n(comment (lid (enc/uuid-str) (enc/uuid-str) (enc/uuid-str)))\n\n;;;; Events\n;; Clients & server both send `event`s and receive (i.e. route) `event-msg`s:\n;;   - `event`s have the same form client+server side,\n;;   - `event-msg`s have a similar but not identical form\n\n(defn- expected [expected x] {:expected expected :actual {:type (type x) :value x}})\n(defn validate-event\n  \"Returns nil if given argument is a valid [ev-id ?ev-data] form. Otherwise\n  returns a map of validation errors like `{:wrong-type {:expected _ :actual _}}`.\"\n  [x]\n  (cond\n    (not (vector? x))        {:wrong-type   (expected :vector x)}\n    (not (#{1 2} (count x))) {:wrong-length (expected #{1 2}  x)}\n    :else\n    (let [[ev-id _] x]\n      (cond\n        (not (keyword? ev-id))  {:wrong-id-type   (expected :keyword            ev-id)}\n        (not (namespace ev-id)) {:unnamespaced-id (expected :namespaced-keyword ev-id)}\n        :else nil))))\n\n(defn assert-event\n  \"Returns given argument if it is a valid [ev-id ?ev-data] form. Otherwise\n  throws a validation exception.\"\n  [x]\n  (when-let [errs (validate-event x)]\n    (throw (ex-info \"Invalid event\" {:given x :errors errs}))))\n\n(defn event? \"Valid [ev-id ?ev-data] form?\" [x] (nil? (validate-event x)))\n(defn as-event [x]\n  (if-let [errs (validate-event x)]\n    ;; [:chsk/bad-event {:given x :errors errs}] ; Breaking change\n    [:chsk/bad-event x]\n    x))\n\n(defn client-event-msg? [x]\n  (and\n    (map? x)\n    (enc/ks>= #{:ch-recv :send-fn :state :event :id :?data} x)\n    (let [{:keys [ch-recv send-fn state event]} x]\n      (and\n        (enc/chan? ch-recv)\n        (ifn?      send-fn)\n        (enc/atom? state)\n        (event?    event)))))\n\n(defn server-event-msg? [x]\n  (and\n    (map? x)\n    (enc/ks>= #{:ch-recv :send-fn :connected-uids :send-buffers\n                :ring-req :client-id\n                :event :id :?data :?reply-fn :uid} x)\n    (let [{:keys [ch-recv send-fn connected-uids send-buffers\n                  ring-req client-id event ?reply-fn]} x]\n      (and\n        (enc/chan?       ch-recv)\n        (ifn?            send-fn)\n        (enc/atom?       connected-uids)\n        (enc/atom?       send-buffers)\n        (map?            ring-req)\n        (enc/nblank-str? client-id)\n        (event?          event)\n        (or (nil? ?reply-fn)\n            (ifn? ?reply-fn))))))\n\n(defn- put-server-event-msg>ch-recv!\n  \"All server `event-msg`s go through this\"\n  [ch-recv {:as ev-msg :keys [event ?reply-fn]}]\n  (let [[ev-id ev-?data :as valid-event] (as-event event)\n        ev-msg* (merge ev-msg {:event     valid-event\n                               :?reply-fn ?reply-fn\n                               :id        ev-id\n                               :?data     ev-?data})]\n    (if (server-event-msg? ev-msg*)\n      (put! ch-recv        ev-msg*)\n      (timbre/warnf \"Bad `event-msg` from server: %s\" ev-msg) ; Log and drop\n      )))\n\n;;; Note that cb replys need _not_ be `event` form!\n#?(:cljs (defn cb-error?   [cb-reply-clj] (#{:chsk/closed :chsk/timeout :chsk/error} cb-reply-clj)))\n#?(:cljs (defn cb-success? [cb-reply-clj] (not (cb-error? cb-reply-clj))))\n\n;;;; Packing\n;; * Client<->server payloads are arbitrary Clojure vals (cb replies or events).\n;; * Payloads are packed for client<->server transit.\n\n(defn- parse-packed\n  \"Returns [<packed> <?format>]. Used to support some minimal backwards\n  compatibility between v2 `pack` and v1 `unpack`.\"\n  ;; TODO Remove this in a future ~breaking release\n  [packed]\n  (if (string? packed)\n    (cond\n      (enc/str-starts-with? packed \"+\") [(subs packed 1) :v1/wrapped]\n      (enc/str-starts-with? packed \"-\") [(subs packed 1) :v1/unwrapped]\n      :else                             [      packed    :v2/unwrapped])\n    [packed :v2/unwrapped]))\n\n(comment (parse-packed \"+[[\\\"foo\\\"] \\\"uuid\\\"]\"))\n\n(defn- unpack \"packed->[clj ?cb-uuid]\"\n  [packer packed]\n  (let [[packed ?format] (parse-packed packed)\n        unpacked ; [clj ?cb-uuid]\n        (try\n          (interfaces/unpack packer packed)\n          (catch #?(:clj Throwable :cljs :default) t\n            (timbre/errorf t \"Failed to unpack: %s\" packed)\n            [[:chsk/bad-package packed] nil]))\n\n        [clj ?cb-uuid]\n        (case ?format\n          :v1/wrapped    unpacked\n          :v1/unwrapped [unpacked nil]\n          :v2/unwrapped  unpacked)\n\n        ?cb-uuid (if (= 0 ?cb-uuid) :ajax-cb ?cb-uuid)]\n\n    [clj ?cb-uuid]))\n\n(def ^:dynamic *write-legacy-pack-format?*\n  \"Advanced option, most users can ignore this var. Only necessary\n  for those that want to use Sente < v1.18 with a non-standard\n  IPacker that deals with non-string payloads.\n\n  Details:\n    Sente uses a private message format as an implementation detail\n    for client<->server comms.\n\n    As part of [#398], this format is being updated to support\n    non-string (e.g. binary) payloads.\n\n    Unfortunately updating the format is non-trivial because:\n      1. Both the client & server need to support the same format.\n      2. Clients are often served as cached cl/js.\n\n    To help ease migration, the new pack format is being rolled out\n    in stages:\n\n      Sente <= v1.16: reads  v1 format only\n                      writes v1 format only\n\n      Sente    v1.17: reads  v1 and v2 formats\n                      writes v1 and v2 formats (v1 default)\n\n      Sente    v1.18: reads  v1 and v2 formats\n                      writes v1 and v2 formats (v2 default)  <- Currently here\n\n      Sente >= v1.19: reads  v2 format only\n                      writes v2 format only\n\n    This var controls which format to use for writing.\n    Override default with `alter-var-root` or `binding`.\"\n\n  false)\n\n(defn- pack \"[clj ?cb-uuid]->packed\"\n  ([packer clj         ] (pack packer clj nil))\n  ([packer clj ?cb-uuid]\n   (let [?cb-uuid (if (= ?cb-uuid :ajax-cb) 0 ?cb-uuid)\n         packed\n         (interfaces/pack packer\n           (if-some [cb-uuid ?cb-uuid]\n             [clj cb-uuid]\n             [clj        ]))]\n\n     (if *write-legacy-pack-format?*\n       (str \"+\" (have string? packed))\n       (do                    packed)))))\n\n(comment\n  (unpack default-edn-packer\n    (binding [*write-legacy-pack-format?* true]\n      (pack default-edn-packer [:foo]))))\n\n(deftype EdnPacker []\n  interfaces/IPacker\n  (pack   [_ x] (enc/pr-edn   x))\n  (unpack [_ s] (enc/read-edn s)))\n\n(def ^:private default-edn-packer (EdnPacker.))\n\n(defn- coerce-packer [x]\n  (if (= x :edn)\n    default-edn-packer\n    (have #(satisfies? interfaces/IPacker %) x)))\n\n(comment\n  (do\n    (require '[taoensso.sente.packers.transit :as transit])\n    (def ^:private default-transit-json-packer (transit/get-transit-packer)))\n\n  (let [pack   interfaces/pack\n        unpack interfaces/unpack\n        data   {:a :A :b :B :c \"hello world\"}]\n\n    (enc/qb 1e4 ; [111.96 67.26]\n      (let [pk default-edn-packer]          (unpack pk (pack pk data)))\n      (let [pk default-transit-json-packer] (unpack pk (pack pk data))))))\n\n;;;; Server API\n\n(def ^:private next-idx! (enc/counter))\n\n(declare\n  ^:private send-buffered-server-evs>clients!\n  ^:private default-client-side-ajax-timeout-ms)\n\n(defn allow-origin?\n  \"Alpha, subject to change.\n  Returns true iff given Ring request is allowed by `allowed-origins`.\n  `allowed-origins` may be `:all` or #{<origin> ...}.\"\n\n  [allowed-origins ring-req]\n  (enc/cond\n    (= allowed-origins :all) true\n\n    :let\n    [headers (get ring-req :headers)\n     origin  (get headers  \"origin\" :nx)\n     have-origin? (not= origin      :nx)]\n\n    (and\n      have-origin?\n      (contains? (set allowed-origins) origin))\n    true\n\n    ;; As per OWASP CSRF Prevention Cheat Sheet\n    :let [referer (get headers \"referer\" \"\")]\n\n    (and\n      (not have-origin?)\n      (enc/rsome #(str/starts-with? referer (str % \"/\")) allowed-origins))\n    true\n\n    :else false))\n\n(comment\n  ;; good (pass)\n  (allow-origin? :all                 {:headers {\"origin\"  \"http://site.com\"}})\n  (allow-origin? #{\"http://site.com\"} {:headers {\"origin\"  \"http://site.com\"}})\n  (allow-origin? #{\"http://site.com\"} {:headers {\"referer\" \"http://site.com/\"}})\n\n  ;; bad (fail)\n  (allow-origin? #{\"http://site.com\"} {:headers nil})\n  (allow-origin? #{\"http://site.com\"} {:headers {\"origin\"  \"http://attacker.com\"}})\n  (allow-origin? #{\"http://site.com\"} {:headers {\"referer\" \"http://attacker.com/\"}})\n  (allow-origin? #{\"http://site.com\"} {:headers {\"referer\" \"http://site.com.attacker.com/\"}}))\n\n(defn make-channel-socket-server!\n  \"Takes a web server adapter[1] and returns a map with keys:\n\n    :ch-recv ; core.async channel to receive `event-msg`s (internal or from clients).\n    :send-fn                     ; (fn [user-id ev] for server>user push.\n    :ajax-post-fn                ; Ring handler for CSRF-POST + chsk URL.\n    :ajax-get-or-ws-handshake-fn ; Ring handler for Ring GET  + chsk URL.\n    :connected-uids ; Watchable, read-only (atom {:ws #{_} :ajax #{_} :any #{_}}).\n\n  Security options:\n\n    :allowed-origins   ; e.g. #{\\\"http://site.com\\\" ...}, defaults to :all. ; Alpha\n\n    :csrf-token-fn     ; ?(fn [ring-req]) -> CSRF-token for Ajax POSTs and WS handshake.\n                       ; nil => CSRF check will be DISABLED (can pose a *CSRF SECURITY RISK*\n                       ; for website use cases, so please ONLY disable this check if you're\n                       ; very sure you understand the implications!).\n\n    :authorized?-fn    ; ?(fn [ring-req]) -> When non-nil, (authorized?-fn <ring-req>)\n                       ; must return truthy, otherwise connection requests will be\n                       ; rejected with (unauthorized-fn <ring-req>) response.\n                       ;\n                       ; May check Authroization HTTP header, etc.\n\n    :?unauthorized-fn  ; An alternative API to `authorized?-fn`+`unauthorized-fn` pair.\n                       ; ?(fn [ring-req)) -> <?rejection-resp>. I.e. when return value\n                       ; is non-nil, connection requests will be rejected with that\n                       ; non-nil value.\n\n  Other common options:\n\n    :user-id-fn         ; (fn [ring-req]) -> unique user-id for server>user push.\n    :handshake-data-fn  ; (fn [ring-req]) -> arb user data to append to handshake evs.\n    :ws-kalive-ms       ; Ping to keep a WebSocket conn alive if no activity\n                        ; w/in given msecs. Should be different to client's :ws-kalive-ms.\n    :lp-timeout-ms      ; Timeout (repoll) long-polling Ajax conns after given msecs.\n    :send-buf-ms-ajax   ; [2]\n    :send-buf-ms-ws     ; [2]\n    :packer             ; :edn (default), or an IPacker implementation.\n\n    :ws-ping-timeout-ms ; When pinging to test WebSocket connections, msecs to\n                        ; await reply before regarding the connection as broken\n\n    ;; When a connection is closed, Sente waits a little for possible reconnection before\n    ;; actually marking the connection as closed. This facilitates Ajax long-polling,\n    ;; server->client buffering, and helps to reduce event noise from spotty connections.\n    :ms-allow-reconnect-before-close-ws   ; Msecs to wait for WebSocket conns (default: 2500)\n    :ms-allow-reconnect-before-close-ajax ; Msecs to wait for Ajax      conns (default: 5000)\n\n  [1] e.g. `(taoensso.sente.server-adapters.http-kit/get-sch-adapter)` or\n           `(taoensso.sente.server-adapters.immutant/get-sch-adapter)`.\n      You must have the necessary web-server dependency in your project.clj and\n      the necessary entry in your namespace's `ns` form.\n\n  [2] Optimization to allow transparent batching of rapidly-triggered\n      server>user pushes. This is esp. important for Ajax clients which use a\n      (slow) reconnecting poller. Actual event dispatch may occur <= given ms\n      after send call (larger values => larger batch windows).\"\n\n  ;; TODO param names are inconsistent, e.g.:\n  ;; ws-ping-timeout-ms, send-buf-ms-ajax, ws-ping-timeout-ms\n\n  [web-server-ch-adapter\n   & [{:keys [recv-buf-or-n ws-kalive-ms lp-timeout-ms ws-ping-timeout-ms\n              send-buf-ms-ajax send-buf-ms-ws\n              user-id-fn bad-csrf-fn bad-origin-fn csrf-token-fn\n              handshake-data-fn packer allowed-origins\n              authorized?-fn unauthorized-fn ?unauthorized-fn\n\n              ms-allow-reconnect-before-close-ws\n              ms-allow-reconnect-before-close-ajax]\n\n       :or   {recv-buf-or-n      (async/sliding-buffer 1000)\n              ws-kalive-ms       (enc/ms :secs 25) ; < Heroku 55s timeout\n              lp-timeout-ms      (enc/ms :secs 20) ; < Heroku 30s timeout\n\n              ;; TODO Default initially disabled since it can take some time\n              ;; for clients to update in the wild. We want to ensure that all\n              ;; clients DO respond to pings before enabling the server to close\n              ;; unresponsive connections.\n              ;;\n              ;; So we're rolling this new feature out in 2 steps:\n              ;;   1. Update clients to respond to pings (with pongs)\n              ;;   2. Update servers to regard lack of pong as broken conn\n              ;;\n              ;; The feature can be enabled early by manually providing a\n              ;; `ws-ping-timeout-ms` val in opts.\n              ;;\n              ws-ping-timeout-ms nil #_(enc/ms :secs 5) ; TODO Enable default val\n\n              send-buf-ms-ajax 100\n              send-buf-ms-ws   30\n\n              user-id-fn      (fn [ ring-req] (get-in ring-req [:session :uid]))\n              bad-csrf-fn     (fn [_ring-req] {:status 403 :body \"Bad CSRF token\"})\n              bad-origin-fn   (fn [_ring-req] {:status 403 :body \"Unauthorized origin\"})\n              unauthorized-fn (fn [_ring-req] {:status 401 :body \"Unauthorized request\"})\n\n              ms-allow-reconnect-before-close-ws   2500\n              ms-allow-reconnect-before-close-ajax 5000\n\n              csrf-token-fn\n              (fn [ring-req]\n                (or (:anti-forgery-token ring-req)\n                  (get-in ring-req [:session :csrf-token])\n                  (get-in ring-req [:session :ring.middleware.anti-forgery/anti-forgery-token])\n                  (get-in ring-req [:session \"__anti-forgery-token\"])\n                  #_:sente/no-reference-csrf-token\n                  ))\n\n              handshake-data-fn (fn [ring-req] nil)\n              packer :edn\n              allowed-origins :all}}]]\n\n  (have? enc/pos-int? send-buf-ms-ajax send-buf-ms-ws)\n  (have? #(satisfies? interfaces/IServerChanAdapter %) web-server-ch-adapter)\n\n  (let [max-ms default-client-side-ajax-timeout-ms]\n    (when (>= lp-timeout-ms max-ms)\n      (throw\n        (ex-info (str \":lp-timeout-ms must be < \" max-ms)\n          {:lp-timeout-ms lp-timeout-ms\n           :default-client-side-ajax-timeout-ms max-ms}))))\n\n  (let [allowed-origins (have [:or set? #{:all}] allowed-origins)\n        packer  (coerce-packer packer)\n        ch-recv (chan recv-buf-or-n)\n\n        user-id-fn\n        (fn [ring-req client-id]\n          ;; Allow uid to depend (in part or whole) on client-id. Be cautious\n          ;; of security implications.\n          (or (user-id-fn (assoc ring-req :client-id client-id)) :sente/nil-uid))\n\n        conns_          (atom {:ws  {} :ajax  {}}) ; {<uid> {<client-id> [<?sch> <udt-last-activity> <conn-id>]}}\n        send-buffers_   (atom {:ws  {} :ajax  {}}) ; {<uid> [<buffered-evs> <#{ev-uuids}>]}\n        connected-uids_ (atom {:ws #{} :ajax #{} :any #{}}) ; Public\n\n        connect-uid!?\n        (fn [conn-type uid] {:pre [(have? uid)]}\n          (let [newly-connected?\n                (swap-in! connected-uids_ []\n                  (fn [{:keys [ws ajax any] :as old-m}]\n                    (let [new-m\n                          (case conn-type\n                            :ws   {:ws (conj ws uid) :ajax ajax            :any (conj any uid)}\n                            :ajax {:ws ws            :ajax (conj ajax uid) :any (conj any uid)})]\n                      (swapped new-m\n                        (let [old-any (:any old-m)\n                              new-any (:any new-m)]\n                          (when (and (not (contains? old-any uid))\n                                          (contains? new-any uid))\n                            :newly-connected))))))]\n            newly-connected?))\n\n        maybe-disconnect-uid!?\n        (fn [uid] {:pre [(have? uid)]}\n          (let [newly-disconnected?\n                (swap-in! connected-uids_ []\n                  (fn [{:keys [ws ajax any] :as old-m}]\n                    (let [conns' @conns_\n                          any-ws-clients?   (contains? (:ws   conns') uid)\n                          any-ajax-clients? (contains? (:ajax conns') uid)\n                          any-clients?      (or any-ws-clients?\n                                                any-ajax-clients?)\n                          new-m\n                          {:ws   (if any-ws-clients?   (conj ws   uid) (disj ws   uid))\n                           :ajax (if any-ajax-clients? (conj ajax uid) (disj ajax uid))\n                           :any  (if any-clients?      (conj any  uid) (disj any  uid))}]\n\n                      (swapped new-m\n                        (let [old-any (:any old-m)\n                              new-any (:any new-m)]\n                          (when (and     (contains? old-any uid)\n                                    (not (contains? new-any uid)))\n                            :newly-disconnected))))))]\n\n            newly-disconnected?))\n\n        send-fn ; server>user (by uid) push\n        (fn [user-id ev & [{:as opts :keys [flush?]}]]\n          (let [uid (if (= user-id :sente/all-users-without-uid) :sente/nil-uid user-id)\n                _   (timbre/tracef \"Server asked to send event to %s: %s\" (lid uid) ev)\n                _   (assert uid\n                      (str \"Support for sending to `nil` user-ids has been REMOVED. \"\n                           \"Please send to `:sente/all-users-without-uid` instead.\"))\n                _   (assert-event ev)\n\n                ev-uuid (enc/uuid-str)\n\n                flush-buffer!\n                (fn [conn-type]\n                  (when-let\n                      [pulled\n                       (swap-in! send-buffers_ [conn-type]\n                         (fn [m]\n                           ;; Don't actually flush unless the event buffered\n                           ;; with _this_ send call is still buffered (awaiting\n                           ;; flush). This means that we'll have many (go\n                           ;; block) buffer flush calls that'll noop. They're\n                           ;; cheap, and this approach is preferable to\n                           ;; alternatives like flush workers.\n                           (let [[_ ev-uuids] (get m uid)]\n                             (if (contains? ev-uuids ev-uuid)\n                               (swapped\n                                 (dissoc m uid)\n                                 (get    m uid))\n                               (swapped m nil)))))]\n\n                    (let [[buffered-evs ev-uuids] pulled]\n                      (have? vector? buffered-evs)\n                      (have? set?    ev-uuids)\n\n                      (let [buffered-evs-ppstr (pack packer buffered-evs)]\n                        (send-buffered-server-evs>clients! conn-type\n                          conns_ uid buffered-evs-ppstr (count buffered-evs))))))]\n\n            (if (= ev [:chsk/close]) ; Currently undocumented\n              (do\n                (timbre/infof \"Server asked to close chsk for %s\" (lid uid))\n                (when flush?\n                  (flush-buffer! :ws)\n                  (flush-buffer! :ajax))\n\n                (doseq [[?sch _udt] (vals (get-in @conns_ [:ws uid]))]\n                  (when-let [sch ?sch] (interfaces/sch-close! sch)))\n\n                (doseq [[?sch _udt] (vals (get-in @conns_ [:ajax uid]))]\n                  (when-let [sch ?sch] (interfaces/sch-close! sch))))\n\n              (do\n                ;; Buffer event\n                (doseq [conn-type [:ws :ajax]]\n                  (swap-in! send-buffers_ [conn-type uid]\n                    (fn [?v]\n                      (if-not ?v\n                        [[ev] #{ev-uuid}]\n                        (let [[buffered-evs ev-uuids] ?v]\n                          [(conj buffered-evs ev)\n                           (conj ev-uuids     ev-uuid)])))))\n\n                ;;; Flush event buffers after relevant timeouts:\n                ;; * May actually flush earlier due to another timeout.\n                ;; * We send to _all_ of a uid's connections.\n                ;; * Broadcasting is possible but I'd suggest doing it rarely,\n                ;;   and only to users we know/expect are actually online.\n                ;;\n                (if flush?\n                  (do\n                    (flush-buffer! :ws)\n                    (flush-buffer! :ajax))\n                  (let [ws-timeout   (async/timeout send-buf-ms-ws)\n                        ajax-timeout (async/timeout send-buf-ms-ajax)]\n                    (go\n                      (<! ws-timeout)\n                      (flush-buffer! :ws))\n                    (go\n                      (<! ajax-timeout)\n                      (flush-buffer! :ajax)))))))\n\n          ;; Server-side send is async so nothing useful to return (currently\n          ;; undefined):\n          nil)\n\n        bad-csrf?\n        (fn [ring-req]\n          (if (nil? csrf-token-fn) ; Provides a way to disable CSRF check\n            false\n            (if-let [reference-csrf-token (csrf-token-fn ring-req)]\n              (let [csrf-token-from-client\n                    (or\n                      (get-in ring-req [:params    :csrf-token])\n                      (get-in ring-req [:headers \"x-csrf-token\"])\n                      (get-in ring-req [:headers \"x-xsrf-token\"]))]\n\n                (not\n                  (enc/const-str=\n                    reference-csrf-token\n                    csrf-token-from-client)))\n\n              true ; By default fail if no CSRF token\n              )))\n\n        unauthorized?\n        (fn [ring-req]\n          (if (nil? authorized?-fn)\n            false\n            (not (authorized?-fn ring-req))))\n\n        ;; nnil if connection attempt should be rejected\n        possible-rejection-resp\n        (fn [ring-req]\n          (enc/cond\n            (bad-csrf?   ring-req)\n            (bad-csrf-fn ring-req)\n\n            (not (allow-origin? allowed-origins ring-req))\n            (bad-origin-fn                      ring-req)\n\n            (unauthorized?   ring-req)\n            (unauthorized-fn ring-req)\n\n            :if-some [unauthorized-resp (when-let [uf ?unauthorized-fn]\n                                          (uf ring-req))]\n            unauthorized-resp\n\n            :else nil))\n\n        ev-msg-const\n        {:ch-recv        ch-recv\n         :send-fn        send-fn\n         :connected-uids connected-uids_\n         :send-buffers   send-buffers_}]\n\n    {:ch-recv         ch-recv\n     :send-fn         send-fn\n     :connected-uids_ connected-uids_\n     :connected-uids  connected-uids_ ; For back compatibility\n     :private         {:conns_        conns_\n                       :send-buffers_ send-buffers_}\n\n     ;; Does not participate in `conns_` (has specific req->resp)\n     :ajax-post-fn\n     (fn ring-handler\n       ([ring-req] (ring-handler ring-req nil nil))\n       ([ring-req ?ring-async-resp-fn ?ring-async-raise-fn]\n        (enc/cond\n          :if-let [resp (possible-rejection-resp ring-req)] resp\n          :else\n          (interfaces/ring-req->server-ch-resp web-server-ch-adapter ring-req\n            {:ring-async-resp-fn  ?ring-async-resp-fn\n             :ring-async-raise-fn ?ring-async-raise-fn\n\n             :on-open\n             (fn [server-ch websocket?]\n               (assert (not websocket?))\n               (let [params        (get ring-req :params)\n                     ppstr         (get params   :ppstr)\n                     client-id     (get params   :client-id)\n                     [clj has-cb?] (unpack packer ppstr)\n                     reply-fn\n                     (let [replied?_ (atom false)]\n                       (fn [resp-clj] ; Any clj form\n                         (when (compare-and-set! replied?_ false true)\n                           (timbre/debugf \"[ajax/on-open] Server will reply to message from %s: %s\"\n                             (lid (user-id-fn ring-req client-id) client-id)\n                             resp-clj)\n\n                           (interfaces/sch-send! server-ch websocket?\n                             (pack packer resp-clj)))))]\n\n                 (put-server-event-msg>ch-recv! ch-recv\n                   (merge ev-msg-const\n                     {;; Note that the client-id is provided here just for the\n                      ;; user's convenience. non-lp-POSTs don't actually need a\n                      ;; client-id for Sente's own implementation:\n                      :client-id client-id #_\"unnecessary-for-non-lp-POSTs\"\n                      :ring-req  ring-req\n                      :event     clj\n                      :uid       (user-id-fn ring-req client-id)\n                      :?reply-fn (when has-cb? reply-fn)}))\n\n                 (if has-cb?\n                   (when-let [ms lp-timeout-ms]\n                     (go\n                       (<! (async/timeout ms))\n                       (reply-fn :chsk/timeout)))\n                   (reply-fn :chsk/dummy-cb-200))))}))))\n\n     ;; Ajax handshake/poll, or WebSocket handshake\n     :ajax-get-or-ws-handshake-fn\n     (fn ring-handler\n       ([ring-req] (ring-handler ring-req nil nil))\n       ([ring-req ?ring-async-resp-fn ?ring-async-raise-fn]\n        (let [;; ?ws-key  (get-in ring-req [:headers \"sec-websocket-key\"])\n              conn-id     (enc/uuid-str 6) ; 1 per ws/ajax rreq, equiv to server-ch identity\n              params      (get ring-req :params)\n              client-id   (get params   :client-id)\n              uid         (user-id-fn ring-req client-id)\n              lid*        (lid uid client-id conn-id)]\n\n          (enc/cond\n            (str/blank? client-id)\n            (let [err-msg \"Client's Ring request doesn't have a client id. Does your server have the necessary keyword Ring middleware (`wrap-params` & `wrap-keyword-params`)?\"]\n              (timbre/error (str err-msg \": \" lid*))\n              (throw    (ex-info err-msg {:ring-req ring-req, :lid lid*})))\n\n            :if-let [resp (possible-rejection-resp ring-req)] resp\n\n            :else\n            (let [receive-event-msg! ; Partial\n                  (fn self\n                    ([event          ] (self event nil))\n                    ([event ?reply-fn]\n                     (put-server-event-msg>ch-recv! ch-recv\n                       (merge ev-msg-const\n                         {:client-id client-id\n                          :ring-req  ring-req\n                          :event     event\n                          :?reply-fn ?reply-fn\n                          :uid       uid}))))\n\n                  send-handshake!?\n                  (fn [server-ch websocket?]\n                    (timbre/infof \"Server will send %s handshake to %s\" (if websocket? :ws :ajax) lid*)\n                    (let [?handshake-data (handshake-data-fn ring-req)\n                          handshake-ev\n                          (if (nil? ?handshake-data) ; Micro optimization\n                            [:chsk/handshake [uid nil]]\n                            [:chsk/handshake [uid nil ?handshake-data]])]\n                      ;; Returns true iff server-ch open during call\n                      (interfaces/sch-send! server-ch websocket?\n                        (pack packer handshake-ev))))\n\n                  on-error\n                  (fn [server-ch websocket? error]\n                    (timbre/errorf \"%s Server sch error for %s: %s\"\n                      (if websocket? \"[ws/on-error]\" \"[ajax/on-error]\")\n                      lid* error))\n\n                  on-msg\n                  (fn [server-ch websocket? req-ppstr]\n                    (assert websocket?)\n                    (swap-in! conns_ [:ws uid client-id]\n                      (fn [[?sch _udt conn-id]]\n                        (when conn-id [?sch (enc/now-udt) conn-id])))\n\n                    (let [[clj ?cb-uuid] (unpack packer req-ppstr)]\n                      ;; clj should be ev\n                      (cond\n                        (= clj [:chsk/ws-pong]) (receive-event-msg! clj nil)\n                        (= clj [:chsk/ws-ping])\n                        (do\n                          ;; Auto reply to ping\n                          (when-let [cb-uuid ?cb-uuid]\n                            (timbre/debugf \"[ws/on-msg] Server will auto-reply to ping from %s\" lid*)\n                            (interfaces/sch-send! server-ch websocket?\n                              (pack packer \"pong\" cb-uuid)))\n\n                          (receive-event-msg! clj nil))\n\n                        :else\n                        (receive-event-msg! clj\n                          (when ?cb-uuid\n                            (fn reply-fn [resp-clj] ; Any clj form\n                              (timbre/debugf \"[ws/on-msg] Server will reply to message from %s: %s\" lid* resp-clj)\n\n                              ;; true iff apparent success:\n                              (interfaces/sch-send! server-ch websocket?\n                                (pack packer resp-clj ?cb-uuid))))))))\n\n                  on-close\n                  (fn [server-ch websocket? _status]\n                    ;; - We rely on `on-close` to trigger for *every* sch.\n                    ;; - May be called *more* than once for a given sch.\n                    ;; - `status` type varies with underlying web server.\n                    (let [conn-type  (if websocket? :ws :ajax)\n                          log-prefix (if websocket? \"[ws/on-close]\" \"[ajax/on-close]\")\n                          active-conn-closed?\n                          (swap-in! conns_ [conn-type uid client-id]\n                            (fn [[?sch _udt conn-id*]]\n                              (if (= conn-id conn-id*)\n                                (swapped [nil (enc/now-udt) conn-id] true)\n                                (swapped :swap/abort                 false))))]\n\n                      ;; Inactive => a connection closed that's not currently in conns_\n\n                      (timbre/debugf \"%s %s server sch closed for %s\"\n                        log-prefix (if active-conn-closed? \"Active\" \"Inactive\") lid*)\n\n                      (when active-conn-closed?\n                        ;; Allow some time for possible reconnects (repoll,\n                        ;; sole window refresh, etc.) before regarding close\n                        ;; as non-transient \"disconnect\"\n                        (go\n                          (let [ms-timeout\n                                (if websocket?\n                                  ms-allow-reconnect-before-close-ws\n                                  ms-allow-reconnect-before-close-ajax)]\n                            (<! (async/timeout ms-timeout)))\n\n                          (let [[active-conn-disconnected? ?conn-entry]\n                                (swap-in! conns_ [conn-type uid client-id]\n                                  (fn [[_?sch _udt conn-id* :as ?conn-entry]]\n                                    (if (= conn-id conn-id*)\n                                      (swapped :swap/dissoc [true  ?conn-entry])\n                                      (swapped :swap/abort  [false ?conn-entry]))))]\n\n                            (let [level (if active-conn-disconnected? :info (if websocket? :debug :trace))]\n                              (timbre/logf level \"%s Server sch on-close timeout for %s: %s\"\n                                log-prefix lid*\n                                (if active-conn-disconnected?\n                                  {:disconnected? true}\n                                  {:disconnected? false, :?conn-entry ?conn-entry})))\n\n                            (when active-conn-disconnected?\n\n                              ;; Potentially remove uid's entire entry\n                              (swap-in! conns_ [conn-type uid]\n                                (fn [m-clients]\n                                  (if (empty? m-clients)\n                                    :swap/dissoc\n                                    :swap/abort)))\n\n                              (when (maybe-disconnect-uid!? uid)\n                                (timbre/infof \"%s uid port close for %s\" log-prefix lid*)\n                                (receive-event-msg! [:chsk/uidport-close uid]))))))))\n\n                  on-open\n                  (fn [server-ch websocket?]\n                    (if websocket?\n\n                      ;; WebSocket handshake\n                      (do\n                        (timbre/infof \"[ws/on-open] New server WebSocket sch for %s\" lid*)\n                        (when (send-handshake!? server-ch websocket?)\n                          (let [[_ udt-open]\n                                (swap-in! conns_ [:ws uid client-id]\n                                  (fn [_] [server-ch (enc/now-udt) conn-id]))]\n\n                            ;; Server-side loop to detect broken conns, Ref. #230\n                            (when ws-kalive-ms\n                              (go-loop [udt-t0          udt-open\n                                        ms-timeout      ws-kalive-ms\n                                        expecting-pong? false]\n\n                                (<! (async/timeout ms-timeout))\n\n                                (let [?conn-entry (get-in @conns_ [:ws uid client-id])\n                                      [?sch udt-t1 conn-id*] ?conn-entry\n\n                                      {:keys [recur? udt ms-timeout expecting-pong? force-close?]}\n                                      (enc/cond\n                                        (nil? ?conn-entry)                                     {:recur? false}\n                                        (not= conn-id conn-id*)                                {:recur? false}\n                                        (when-let [sch ?sch] (not (interfaces/sch-open? sch))) {:recur? false, :force-close? true}\n\n                                        (not= udt-t0 udt-t1) ; Activity in last kalive window\n                                        {:recur? true, :udt udt-t1, :ms-timeout ws-kalive-ms, :expecting-pong? false}\n\n                                        :do (timbre/debugf \"[ws/on-open] kalive loop inactivity for %s\" lid*)\n\n                                        expecting-pong?\n                                        (do\n                                          ;; Was expecting pong (=> activity) in last kalive window\n                                          (interfaces/sch-close! server-ch)\n                                          {:recur? false})\n\n                                        :else\n                                        (if-let [;; If a conn has gone bad but is still marked as open,\n                                                 ;; attempting to send a ping will usually trigger the\n                                                 ;; conn's :on-close immediately, i.e. no need to wait\n                                                 ;; for a missed pong.\n                                                 ping-apparently-sent?\n                                                 (interfaces/sch-send! server-ch websocket?\n                                                   (pack packer :chsk/ws-ping))]\n\n                                          (if ws-ping-timeout-ms\n                                            {:recur? true, :udt udt-t1, :ms-timeout ws-ping-timeout-ms, :expecting-pong? true}\n                                            {:recur? true, :udt udt-t1, :ms-timeout ws-kalive-ms,       :expecting-pong? false})\n\n                                          {:recur? false, :force-close? true}))]\n\n                                  (if recur?\n                                    (recur udt ms-timeout expecting-pong?)\n                                    (do\n                                      (timbre/debugf \"[ws/on-open] Ending kalive loop for %s\" lid*)\n                                      (when force-close?\n                                        ;; It's rare but possible for a conn's :on-close to fire\n                                        ;; *before* a handshake, leaving a closed sch in conns_\n                                        (timbre/debugf \"[ws/on-open] Force close connection for %s\" lid*)\n                                        (on-close server-ch websocket? nil)))))))\n\n                            (when (connect-uid!? :ws uid)\n                              (timbre/infof \"[ws/on-open] uid port open for %s\" lid*)\n                              (receive-event-msg! [:chsk/uidport-open uid])))))\n\n                      ;; Ajax handshake/poll\n                      (let [send-handshake?\n                            (or\n                              (:handshake? params)\n                              (nil? (get-in @conns_ [:ajax uid client-id])))]\n\n                        (timbre/logf (if send-handshake? :info :trace)\n                          \"[ajax/on-open] New server Ajax sch (poll/handshake) for %s: %s\"\n                          lid* {:send-handshake? send-handshake?})\n\n                        (if send-handshake?\n                          (do\n                            (swap-in! conns_ [:ajax uid client-id] (fn [_] [nil (enc/now-udt) conn-id]))\n                            (send-handshake!? server-ch websocket?)\n                            ;; `server-ch` will close, and client will immediately repoll\n                            )\n\n                          (let [[_ udt-open]\n                                (swap-in! conns_ [:ajax uid client-id]\n                                  (fn [_] [server-ch (enc/now-udt) conn-id]))]\n\n                            (when-let [ms lp-timeout-ms]\n                              (go\n                                (<! (async/timeout ms))\n                                (when-let [[_?sch _udt conn-id*] (get-in @conns_ [:ajax uid client-id])]\n                                  (when (= conn-id conn-id*)\n                                    (timbre/debugf \"[ajax/on-open] Polling timeout for %s\" lid*)\n                                    (interfaces/sch-send! server-ch websocket?\n                                      (pack packer :chsk/timeout))))))\n\n                            (when (connect-uid!? :ajax uid)\n                              (timbre/infof \"[ajax/on-open] uid port open for %s\" lid*)\n                              (receive-event-msg! [:chsk/uidport-open uid])))))))]\n\n              (interfaces/ring-req->server-ch-resp web-server-ch-adapter ring-req\n                {:ring-async-resp-fn  ?ring-async-resp-fn\n                 :ring-async-raise-fn ?ring-async-raise-fn\n                 :on-open             on-open\n                 :on-msg              on-msg\n                 :on-close            on-close\n                 :on-error            on-error}))))))}))\n\n(def ^:dynamic *simulated-bad-conn-rate*\n  \"Debugging tool. Proportion \u2208\u211d[0,1] of connection activities to sabotage.\"\n  nil)\n\n(defn- simulated-bad-conn? []\n  (when-let [sbcr *simulated-bad-conn-rate*]\n    (enc/chance sbcr)))\n\n(comment (binding [*simulated-bad-conn-rate* 0.5] (simulated-bad-conn?)))\n\n(defn- send-buffered-server-evs>clients!\n  \"Actually pushes buffered events (as packed-str) to all uid's conns.\n  Allows some time for possible reconnects.\"\n  [conn-type conns_ uid buffered-evs-pstr n-buffered-evs]\n  (have? [:el #{:ajax :ws}] conn-type)\n  (let [;; Mean max wait time: sum*1.5 = 2790*1.5 = 4.2s\n        ms-backoffs [90 180 360 720 720 720] ; => max 1+6 attempts\n        websocket?  (= conn-type :ws)\n        udt-t0      (enc/now-udt)]\n\n    (when-let [client-ids (keys (get-in @conns_ [conn-type uid]))]\n      (go-loop [pending (set client-ids), idx 0]\n        (let [pending\n              (reduce\n                (fn [pending client-id]\n                  (if-let [sent?\n                           (when-let [conn-id\n                                      (when-let [[?sch _udt conn-id] (get-in @conns_ [conn-type uid client-id])]\n                                        (when-let [sch ?sch]\n                                          (when-not (simulated-bad-conn?)\n                                            (when (interfaces/sch-send! sch websocket? buffered-evs-pstr)\n                                              conn-id))))]\n\n                             (swap-in! conns_ [conn-type uid client-id]\n                               (fn [[?sch udt conn-id*]]\n                                 (if (= conn-id conn-id*)\n                                   (if websocket?\n                                     [?sch (enc/now-udt) conn-id]\n                                     [nil  udt           conn-id])\n                                   :swap/abort)))\n\n                             true)]\n\n                    (disj pending client-id)\n                    (do   pending)))\n                pending\n                pending)]\n\n          (if-let [done? (or (empty? pending) (> idx 4))]\n            (let [n-desired (count client-ids)\n                  n-success (- n-desired (count pending))]\n              (timbre/debugf \"Sent %s buffered evs to %s/%s %s clients for %s in %s attempt/s (%s msecs)\"\n                n-buffered-evs n-success n-desired conn-type (lid uid) (inc idx) (- (enc/now-udt) udt-t0)))\n\n            (let [ms-timeout\n                  (let [ms-backoff (nth ms-backoffs idx)]\n                    (+ ms-backoff (rand-int ms-backoff)))]\n\n              ;; Allow some time for possible poller reconnects:\n              (<! (async/timeout ms-timeout))\n              (recur pending (inc idx)))))))))\n\n;;;; Client API\n\n#?(:cljs (def ajax-call \"Alias of `taoensso.encore/ajax-call`\" enc/ajax-call))\n\n   (defprotocol IChSocket\n     (-chsk-connect!          [chsk])\n     (-chsk-disconnect!       [chsk reason])\n     (-chsk-reconnect!        [chsk reason])\n     (-chsk-break-connection! [chsk opts])\n     (-chsk-send!             [chsk ev opts]))\n\n   (defn chsk-connect!    [chsk] (-chsk-connect!    chsk))\n   (defn chsk-disconnect! [chsk] (-chsk-disconnect! chsk :requested-disconnect))\n   (defn chsk-reconnect!\n     \"Cycles connection, useful for reauthenticating after login/logout, etc.\"\n     [chsk] (-chsk-reconnect! chsk :requested-reconnect))\n\n   (defn chsk-break-connection!\n     \"Breaks channel socket's underlying connection without doing a clean\n     disconnect as in `chsk-disconnect!`. Useful for simulating broken\n     connections in testing, etc.\n\n     Options:\n\n       `:close-ws?` - (Default: true)\n         Allow WebSocket's `on-close` event to fire?\n         Set to falsey to ~simulate a broken socket that doesn't realise\n         it's broken.\"\n\n     ([chsk] (-chsk-break-connection! chsk nil))\n     ([chsk {:keys [close-ws?] :as opts\n             :or   {close-ws? true}}]\n      (-chsk-break-connection! chsk opts)))\n\n   (defn chsk-send!\n     \"Sends `[ev-id ev-?data :as event]`, returns true on apparent success.\"\n     ([chsk ev] (chsk-send! chsk ev {}))\n     ([chsk ev ?timeout-ms ?cb] (chsk-send! chsk ev {:timeout-ms ?timeout-ms\n                                                     :cb         ?cb}))\n     ([chsk ev opts]\n      (timbre/tracef \"Client chsk send: %s\" {:opts (assoc opts :cb (boolean (:cb opts))), :ev ev})\n      (-chsk-send! chsk ev opts)))\n\n   (defn- chsk-send->closed! [?cb-fn]\n     (timbre/warnf \"Client chsk send against closed chsk: %s\" {:cb? (boolean ?cb-fn)})\n     (when ?cb-fn (?cb-fn :chsk/closed))\n     false)\n\n   (defn- assert-send-args [x ?timeout-ms ?cb]\n     (assert-event x)\n     (assert (or (and (nil? ?timeout-ms) (nil? ?cb))\n                 (and (enc/nat-int? ?timeout-ms)))\n       (str \"cb requires a timeout; timeout-ms should be a +ive integer: \" ?timeout-ms))\n     (assert (or (nil? ?cb) (ifn? ?cb) (enc/chan? ?cb))\n       (str \"cb should be nil, an ifn, or a channel: \" (type ?cb))))\n\n   (defn- pull-unused-cb-fn! [cbs-waiting_ ?cb-uuid]\n     (when-let [cb-uuid ?cb-uuid]\n       (swap-in! cbs-waiting_ [cb-uuid]\n         (fn [?f] (swapped :swap/dissoc ?f)))))\n\n   (defn- swap-chsk-state!\n     \"Atomically swaps the value of chk's :state_ atom.\"\n     [chsk f]\n     (let [[old-state new-state] #_(swap-vals! (:state_ chsk) f) ; Clj 1.9+\n           (swap-in! (:state_ chsk)\n             (fn [old-state]\n               (let [new-state (f old-state)]\n                 (swapped new-state [old-state new-state]))))]\n\n       (when (not= old-state new-state)\n         (let [old-open? (boolean (:open? old-state))\n               new-open? (boolean (:open? new-state))\n\n               open-changed? (not=     new-open?      old-open? )\n               opened?       (and      new-open? (not old-open?))\n               closed?       (and (not new-open?)     old-open?)\n               first-open?   (and opened? (not (:ever-opened? old-state)))\n\n               new-state ; Add transient state transitions, not in @state_\n               (if-not open-changed?\n                 (do             new-state)\n                 (enc/assoc-when new-state\n                   :open-changed? true\n                   :opened?       opened?\n                   :closed?       closed?\n                   :first-open?   first-open?))]\n\n           (cond\n             opened? (timbre/infof \"Client chsk now open\")\n             closed? (timbre/warnf \"Client chsk now closed, reason: %s\"\n                       (get-in new-state [:last-close :reason] \"unknown\")))\n\n           (let [output [old-state new-state open-changed?]]\n             (put! (get-in chsk [:chs :state]) [:chsk/state output])\n             open-changed?)))))\n\n   (defn- chsk-state->closed [state reason]\n     (have? map? state)\n     (have?\n       [:el #{:clean :unexpected\n              :requested-disconnect\n              :requested-reconnect\n              :downgrading-ws-to-ajax\n              :ws-ping-timeout :ws-error}]\n       reason)\n\n     (let [closing? (:open? state)\n           m state\n           m (dissoc m :udt-next-reconnect)\n           m (assoc  m :open? false)]\n\n       (if closing?\n         (assoc m :last-close {:udt (enc/now-udt) :reason reason})\n         (do    m))))\n\n   (defn- cb-chan-as-fn\n     \"Experimental, undocumented. Allows a core.async channel to be provided\n     instead of a cb-fn. The channel will receive values of form\n     [<event-id>.cb <reply>].\"\n     [?cb ev]\n     (if (or (nil? ?cb) (ifn? ?cb))\n       ?cb\n       (do\n         (have? enc/chan? ?cb)\n         (assert-event ev)\n         (let [[ev-id _] ev\n               cb-ch ?cb]\n           (fn [reply]\n             (put! cb-ch\n               [(keyword (str (enc/as-qname ev-id) \".cb\"))\n                reply]))))))\n\n   (defn- receive-buffered-evs! [chs clj]\n     (let [buffered-evs (have vector? clj)]\n\n       (timbre/tracef \"Client received %s buffered evs from server: %s\"\n         (count buffered-evs)\n         clj)\n\n       (doseq [ev buffered-evs]\n         (assert-event ev)\n         ;; Should never receive :chsk/* events from server here:\n         (let [[id] ev] (assert (not= (namespace id) \"chsk\")))\n         (put! (:<server chs) ev))))\n\n   (defn- handshake? [x]\n     (and (vector? x) ; Nb support arb input (e.g. cb replies)\n       (let [[x1] x] (= x1 :chsk/handshake))))\n\n   (defn- receive-handshake! [chsk-type chsk clj]\n     (have? [:el #{:ws :ajax}] chsk-type)\n     (have? handshake? clj)\n\n     (let [[_ [?uid _ ?handshake-data]] clj\n           {:keys [chs ever-opened?_]} chsk\n           first-handshake? (compare-and-set! ever-opened?_ false true)\n           new-state\n           {:type           chsk-type ; :auto -> e/o #{:ws :ajax}, etc.\n            :open?          true\n            :ever-opened?   true\n            :uid            ?uid\n            :handshake-data ?handshake-data}\n\n           handshake-ev\n           [:chsk/handshake\n            [?uid nil ?handshake-data first-handshake?]\n\n            #_ ; TODO In a future breaking release?\n            {:uid              ?uid\n             :handshake-data   ?handshake-data\n             :first-handshake? first-handshake?}]]\n\n       (timbre/infof \"Client received %s %s handshake from server: %s\"\n         (if first-handshake? \"first\" \"new\")\n         chsk-type\n         clj)\n\n       (assert-event handshake-ev)\n       (swap-chsk-state! chsk\n         (fn [m]\n           (-> m\n             (dissoc :udt-next-reconnect)\n             (merge new-state))))\n\n       (put! (:internal chs) handshake-ev)\n       :handled))\n\n#?(:clj\n   (defmacro ^:private elide-require\n     \"Experimental. The presence of `js/require` calls can cause issues with\n    React Native, even if they never execute. Currently no other known\n    workarounds. Ref. https://github.com/ptaoussanis/sente/issues/247.\"\n     [& body]\n     (when-not (enc/get-env {:as :bool} :sente-elide-js-require)\n       `(do ~@body))))\n\n#?(:cljs\n   (def ^:private ?node-npm-websocket_\n     \"nnil iff the websocket npm library[1] is available.\n     Easiest way to install:\n       1. Add the lein-npm[2] plugin to your `project.clj`,\n       2. Add: `:npm {:dependencies [[websocket \\\"1.0.23\\\"]]}`\n\n     [1] Ref. https://www.npmjs.com/package/websocket\n     [2] Ref. https://github.com/RyanMcG/lein-npm\"\n\n     ;; This `let` silliness intended to work around React Native's\n     ;; static analysis tool, to prevent it from detecting a\n     ;; missing package.\n     ;;\n     ;; Ref. https://github.com/ptaoussanis/sente/issues/247#issuecomment-555219121\n     ;;\n     (let [make-package-name (fn [prefix] (str prefix \"socket\"))\n           require-fn\n           (if (exists? js/require)\n             js/require\n             (constantly :no-op))]\n\n       (delay ; Eager eval causes issues with React Native, Ref. #247,\n         (elide-require ; TODO is this now safe to remove?\n           (when (and node-target? (exists? js/require))\n             (try\n               (require-fn (make-package-name \"web\"))\n               ;; In particular, catch 'UnableToResolveError'\n               (catch :default e\n                 ;; (timbre/errorf e \"Client unable to load npm websocket lib\")\n                 nil))))))))\n\n#?(:clj\n   (defn- make-client-ws-java\n     [{:as opts :keys [uri-str headers on-error on-message on-close]}]\n     (when-let [ws-client\n                (try\n                  (let [uri (java.net.URI. uri-str)\n                        #_headers\n                        #_\n                        (ImmutableMap/of\n                          \"Origin\"                   \"http://localhost:3200\"\n                          \"Referer\"                  \"http://localhost:3200\"\n                          \"Sec-WebSocket-Extensions\" \"permessage-deflate; client_max_window_bits\")]\n\n                    (proxy [WebSocketClient] [^java.net.URI uri ^java.util.Map headers]\n                      (onOpen    [^org.java_websocket.handshake.ServerHandshake handshakedata] nil)\n                      (onError   [ex]                 (on-error   ex))\n                      (onMessage [^String message]    (on-message message))\n                      (onClose   [code reason remote] (on-close   code reason remote))))\n\n                  (catch Throwable t\n                    (timbre/errorf t \"Error creating Java WebSocket client\")\n                    nil))]\n\n       (delay\n         (.connect ws-client)\n         (do       ws-client)))))\n\n#?(:cljs\n   (defn- make-client-ws-js\n     [{:as opts :keys [uri-str headers on-error on-message on-close binary-type]}]\n     (when-let [WebSocket\n                (or\n                  (enc/oget goog/global           \"WebSocket\")\n                  (enc/oget goog/global           \"MozWebSocket\")\n                  (enc/oget @?node-npm-websocket_ \"w3cwebsocket\"))]\n\n       (delay\n         (let [socket (WebSocket. uri-str)]\n           (doto socket\n             (aset \"onerror\"   on-error)\n             (aset \"onmessage\" on-message) ; Nb receives both push & cb evs!\n             ;; Fires repeatedly (on each connection attempt) while server is down:\n             (aset \"onclose\"   on-close))\n\n           (when-let [bt binary-type] ; \"arraybuffer\" or \"blob\" (js default)\n             (aset socket \"binaryType\" bt))\n           socket)))))\n\n(defn- default-client-ws-constructor\n  \"Returns nil if WebSocket client cannot be created, or a delay\n  that can be derefed to get a connected client.\"\n  [{:as opts :keys [on-error on-message on-close uri-str headers]}]\n  #?(:cljs (make-client-ws-js   opts)\n     :clj  (make-client-ws-java opts)))\n\n(defn- get-client-csrf-token-str\n  \"Returns non-blank client CSRF token ?string from given token string\n  or (fn [])->?string.\"\n  [warn? token-or-fn]\n  (when token-or-fn\n    (let [dynamic? (fn? token-or-fn)]\n      (if-let [token (enc/as-?nblank (if dynamic? (token-or-fn) token-or-fn))]\n        token\n        (when-let [warn? (if (= warn? :dynamic) dynamic? warn?)]\n          (timbre/warnf \"WARNING: no client CSRF token provided. Connections will FAIL if server-side CSRF check is enabled (as it is by default).\")\n          nil)))))\n\n(comment (get-client-csrf-token-str false \"token\"))\n\n(def client-unloading?_ (atom false))\n#?(:cljs\n   (enc/catching ; Not possible on Node, React Native, etc.\n     (.addEventListener goog/global \"beforeunload\"\n       (fn [event] (reset! client-unloading?_ true) nil))))\n\n(defn- retry-connect-chsk!\n  [chsk backoff-ms-fn connect-fn retry-count]\n  (if (= retry-count 1)\n    (do\n      (timbre/infof \"Client will try reconnect chsk now\")\n      (connect-fn))\n\n    (let [backoff-ms         (backoff-ms-fn retry-count)\n          udt-next-reconnect (+ (enc/now-udt) backoff-ms)]\n\n      (timbre/infof \"Client will try reconnect chsk (attempt %s) after %s msecs\"\n        retry-count backoff-ms)\n\n      #?(:cljs (.setTimeout goog/global connect-fn backoff-ms)\n         :clj  (go\n                 (<! (async/timeout backoff-ms))\n                 (timbre/infof \"Client will try reconnect chsk (attempt %s) now\" retry-count)\n                 (connect-fn)))\n\n      (swap-chsk-state! chsk\n        #(assoc % :udt-next-reconnect udt-next-reconnect)))))\n\n(defrecord ChWebSocket\n  ;; WebSocket-only IChSocket implementation\n  ;; Handles (re)connections, cbs, etc.\n\n  [client-id chs params headers packer url\n   state_ ; {:type _ :open? _ :uid _ :csrf-token _ ...}\n   conn-id_ retry-count_ ever-opened?_\n   ws-kalive-ms ws-ping-timeout-ms ws-opts\n   backoff-ms-fn ; (fn [nattempt]) -> msecs\n   cbs-waiting_ ; {<cb-uuid> <fn> ...}\n   socket_ ; ?[<socket> <socket-id>]\n   udt-last-comms_\n   ws-constructor]\n\n  IChSocket\n  (-chsk-disconnect! [chsk reason]\n    (reset! conn-id_ nil) ; Disable auto retry\n    (let [closed? (swap-chsk-state! chsk #(chsk-state->closed % reason))]\n      (when-let [[s _sid] @socket_]\n        #?(:clj  (.close ^WebSocketClient s 1000 \"CLOSE_NORMAL\")\n           :cljs (.close                  s 1000 \"CLOSE_NORMAL\")))\n      closed?))\n\n  (-chsk-reconnect! [chsk reason]\n    (-chsk-disconnect! chsk reason)\n    (-chsk-connect!    chsk))\n\n  (-chsk-break-connection! [chsk opts]\n    (let [{:keys [close-ws? ws-code]\n           :or   {ws-code 3000}} opts]\n\n      (when-let [[s _sid]\n                 (if-not close-ws?\n                   ;; Suppress socket's `on-close` handler by breaking\n                   ;; (own-socket?) socket ownership test\n                   (reset-in! socket_ nil)\n                   (do       @socket_))]\n\n        #?(:clj  (.close ^WebSocketClient s ws-code \"CLOSE_ABNORMAL\")\n           :cljs (.close                  s ws-code \"CLOSE_ABNORMAL\")))\n      nil))\n\n  (-chsk-send! [chsk ev opts]\n    (let [{?timeout-ms :timeout-ms ?cb :cb :keys [flush?]} opts\n          _ (assert-send-args ev ?timeout-ms ?cb)\n          ?cb-fn (cb-chan-as-fn ?cb ev)]\n      (if-not (:open? @state_) ; Definitely closed\n        (chsk-send->closed! ?cb-fn)\n\n        ;; TODO Buffer before sending (but honor `:flush?`)\n        (let [?cb-uuid (when ?cb-fn (enc/uuid-str 6))\n              ppstr (pack packer ev ?cb-uuid)]\n\n          (when-let [cb-uuid ?cb-uuid]\n            (reset-in! cbs-waiting_ [cb-uuid] (have ?cb-fn))\n            (when-let [timeout-ms ?timeout-ms]\n              (go\n                (<! (async/timeout timeout-ms))\n                (when-let [cb-fn* (pull-unused-cb-fn! cbs-waiting_ ?cb-uuid)]\n                  (cb-fn* :chsk/timeout)))))\n\n          (or\n            (when-let [[s _sid] @socket_]\n              (try\n                #?(:cljs (.send                  s         ppstr)\n                   :clj  (.send ^WebSocketClient s ^String ppstr))\n\n                (reset! udt-last-comms_ (enc/now-udt))\n                :apparent-success\n                (catch #?(:clj Throwable :cljs :default) t\n                  (timbre/errorf t \"Client chsk send error\")\n                  nil)))\n\n            (do\n              (when-let [cb-uuid ?cb-uuid]\n                (let [cb-fn* (or (pull-unused-cb-fn! cbs-waiting_ cb-uuid)\n                                 (have ?cb-fn))]\n                  (cb-fn* :chsk/error)))\n\n              (-chsk-reconnect! chsk :ws-error)\n\n              false))))))\n\n  (-chsk-connect! [chsk]\n    (let [this-conn-id (reset! conn-id_ (enc/uuid-str))\n          own-conn?    (fn [] (= @conn-id_ this-conn-id))\n\n          connect-fn\n          (fn connect-fn []\n            (when (own-conn?)\n              (let [;; ID for the particular candidate socket to be returned from\n                    ;; this particular connect-fn call\n                    this-socket-id (enc/uuid-str)\n                    own-socket?\n                    (fn []\n                      (when-let [[_s sid] @socket_]\n                        (= sid this-socket-id)))\n\n                    retry-fn\n                    (fn []\n                      (when (and (own-conn?) (not @client-unloading?_))\n                        (retry-connect-chsk! chsk backoff-ms-fn connect-fn\n                          (swap! retry-count_ inc))))\n\n                    on-error\n                    #?(:cljs\n                       (fn [ws-ev]\n                         (when (own-socket?)\n                           (timbre/errorf ; ^:meta {:raw-console? true}\n                             \"Client WebSocket error: %s\"\n                             (try\n                               (js->clj          ws-ev)\n                               (catch :default _ ws-ev)))\n\n                           (swap-chsk-state! chsk\n                             #(assoc % :last-ws-error\n                                {:udt (enc/now-udt), :ev ws-ev}))))\n\n                       :clj\n                       (fn [ex]\n                         (when (own-socket?)\n                           (timbre/errorf ex \"Client WebSocket error\")\n                           (swap-chsk-state! chsk\n                             #(assoc % :last-ws-error\n                                {:udt (enc/now-udt), :ex ex})))))\n\n                    on-message ; Nb receives both push & cb evs!\n                    (fn #?(:cljs [ws-ev] :clj [ppstr])\n                      (let [ppstr #?(:clj            ppstr\n                                     :cljs (enc/oget ws-ev \"data\"))\n\n                            ;; `clj` may/not satisfy `event?` since\n                            ;; we also receive cb replies here. This\n                            ;; is why we prefix pstrs to indicate\n                            ;; whether they're wrapped or not\n                            [clj ?cb-uuid] (unpack packer ppstr)]\n\n                        (reset! udt-last-comms_ (enc/now-udt))\n\n                        (or\n                          (when (and (own-socket?) (handshake? clj))\n                            (receive-handshake! :ws chsk clj)\n                            (reset! retry-count_ 0)\n                            :done/did-handshake)\n\n                          (when (= clj :chsk/ws-ping)\n                            (-chsk-send! chsk       [:chsk/ws-pong] {:flush? true})\n                            #_(put! (:internal chs) [:chsk/ws-ping]) ; Would be better, but breaking\n                            (put!   (:<server  chs) [:chsk/ws-ping]) ; Odd choice for back compatibility\n                            :done/sent-pong)\n\n                          (if-let [cb-uuid ?cb-uuid]\n                            (if-let [cb-fn (pull-unused-cb-fn! cbs-waiting_\n                                             cb-uuid)]\n                              (cb-fn clj)\n                              (timbre/warnf \"Client :ws cb reply w/o local cb-fn: %s\" clj))\n                            (let [buffered-evs clj]\n                              (receive-buffered-evs! chs buffered-evs))))))\n\n                    on-close\n                    ;; Fires repeatedly (on each connection attempt) while server down\n                    (fn #?(:cljs [ws-ev] :clj [code reason _remote?])\n                      (when (own-socket?)\n                        (let [;; For codes, Ref. https://www.rfc-editor.org/rfc/rfc6455.html#section-7.1.5\n                              last-ws-close ; For advanced debugging, etc.\n                              #?(:clj\n                                 {:udt    (enc/now-udt)\n                                  :code   code\n                                  :reason reason\n                                  :clean? (= code 1000)}\n\n                                 :cljs\n                                 {:udt             (enc/now-udt)\n                                  :code            (enc/oget ws-ev \"code\")\n                                  :reason          (enc/oget ws-ev \"reason\")\n                                  :clean? (boolean (enc/oget ws-ev \"wasClean\"))\n                                  :ev                        ws-ev})\n\n                              reason* (if (:clean? last-ws-close) :clean :unexpected)]\n\n                          (swap-chsk-state! chsk\n                            #(assoc (chsk-state->closed % reason*)\n                               :last-ws-close last-ws-close))\n\n                          (retry-fn))))\n\n                    ?new-socket_\n                    (try\n                      (ws-constructor\n                        (merge ws-opts\n                          {:on-error   on-error\n                           :on-message on-message\n                           :on-close   on-close\n                           :headers    headers\n                           :uri-str\n                           (enc/merge-url-with-query-string url\n                             (merge params ; 1st (don't clobber impl.):\n                               {:client-id  client-id\n                                :csrf-token (get-client-csrf-token-str :dynamic\n                                              (:csrf-token @state_))}))}))\n\n                      (catch #?(:clj Throwable :cljs :default) t\n                        (timbre/errorf t \"Error creating WebSocket client\")\n                        nil))]\n\n                (when-let [new-socket_ ?new-socket_]\n                  (if-let [new-socket\n                           (try\n                             (force new-socket_)\n                             (catch #?(:clj Throwable :cljs :default) t\n                               (timbre/errorf t \"Error realizing WebSocket client\")\n                               nil))]\n                    (do\n                      (when-let [[old-s _old-sid] (reset-in! socket_ [new-socket this-socket-id])]\n                        ;; Close old socket if one exists\n                        (timbre/tracef \"Old client WebSocket will be closed\")\n                        #?(:clj  (.close ^WebSocketClient old-s 1000 \"CLOSE_NORMAL\")\n                           :cljs (.close                  old-s 1000 \"CLOSE_NORMAL\")))\n                      new-socket)\n                    (retry-fn))))))]\n\n      (reset! retry-count_ 0)\n\n      (when (connect-fn)\n\n        ;; Client-side loop to detect broken conns, Ref. #259\n        (when-let [ms ws-kalive-ms]\n          (go-loop []\n            (let [udt-t0 @udt-last-comms_]\n              (<! (async/timeout ms))\n              (when (own-conn?)\n                (let [udt-t1 @udt-last-comms_]\n                  (when-let [;; No conn send/recv activity w/in kalive window?\n                             no-activity? (= udt-t0 udt-t1)]\n\n                    (timbre/tracef \"Client will send ws-ping to server: %s\"\n                      {:ms-since-last-activity (- (enc/now-udt) udt-t1)\n                       :timeout-ms ws-ping-timeout-ms})\n\n                    (-chsk-send! chsk [:chsk/ws-ping]\n                      {:flush? true\n                       :timeout-ms ws-ping-timeout-ms\n                       :cb ; Server will auto reply\n                       (fn [reply]\n                         (when (and (own-conn?) (not= reply \"pong\") #_(= reply :chsk/timeout))\n                           (timbre/debugf \"Client ws-ping to server timed-out, will cycle WebSocket now\")\n                           (-chsk-reconnect! chsk :ws-ping-timeout)))})))\n                (recur)))))\n\n        chsk))))\n\n(defn- new-ChWebSocket [opts csrf-token]\n  (map->ChWebSocket\n    (merge\n      {:state_ (atom {:type :ws :open? false :ever-opened? false :csrf-token csrf-token})\n       :conn-id_        (atom nil)\n       :retry-count_    (atom 0)\n       :ever-opened?_   (atom false)\n       :cbs-waiting_    (atom {})\n       :socket_         (atom nil)\n       :udt-last-comms_ (atom nil)}\n      opts)))\n\n(def ^:private default-client-side-ajax-timeout-ms\n  \"We must set *some* client-side timeout otherwise an unpredictable (and\n  probably too short) browser default will be used. Must be > server's\n  :lp-timeout-ms.\"\n  (enc/ms :secs 60))\n\n#?(:cljs\n   (defrecord ChAjaxSocket\n     ;; Ajax-only IChSocket implementation\n     ;; Handles (re)polling, etc.\n\n     [client-id chs params packer url state_\n      conn-id_ ever-opened?_\n      backoff-ms-fn\n      ajax-opts curr-xhr_]\n\n     IChSocket\n     (-chsk-disconnect! [chsk reason]\n       (reset! conn-id_ nil) ; Disable auto retry\n       (let [closed? (swap-chsk-state! chsk #(chsk-state->closed % reason))]\n         (when-let [x @curr-xhr_] (.abort x))\n         closed?))\n\n     (-chsk-reconnect! [chsk reason]\n       (-chsk-disconnect! chsk reason)\n       (-chsk-connect!    chsk))\n\n     (-chsk-break-connection! [chsk _opts]\n       (when-let [x @curr-xhr_] (.abort x)) nil)\n\n     (-chsk-send! [chsk ev opts]\n       (let [{?timeout-ms :timeout-ms ?cb :cb :keys [flush?]} opts\n             _ (assert-send-args ev ?timeout-ms ?cb)\n             ?cb-fn (cb-chan-as-fn ?cb ev)]\n         (if-not (:open? @state_) ; Definitely closed\n           (chsk-send->closed! ?cb-fn)\n\n           ;; TODO Buffer before sending (but honor `:flush?`)\n           (let [csrf-token-str (get-client-csrf-token-str :dynamic (:csrf-token @state_))]\n             (ajax-call url\n               (merge ajax-opts\n                 {:method     :post\n                  :timeout-ms (or ?timeout-ms (:timeout-ms ajax-opts)\n                                  default-client-side-ajax-timeout-ms)\n                  :resp-type  :text ; We'll do our own pstr decoding\n                  :headers\n                  (merge\n                    (:headers ajax-opts) ; 1st (don't clobber impl.)\n                    {:X-CSRF-Token csrf-token-str})\n\n                  :params\n                  (let [ppstr (pack packer ev (when ?cb-fn :ajax-cb))]\n                    (merge params ; 1st (don't clobber impl.):\n                      {:udt        (enc/now-udt) ; Force uncached resp\n\n                       ;; A duplicate of X-CSRF-Token for user's convenience\n                       ;; and for back compatibility with earlier CSRF docs:\n                       :csrf-token csrf-token-str\n\n                       ;; Just for user's convenience here. non-lp-POSTs\n                       ;; don't actually need a client-id for Sente's own\n                       ;; implementation:\n                       :client-id  client-id\n\n                       :ppstr      ppstr}))})\n\n               (fn ajax-cb [{:keys [?error ?content]}]\n                 (if ?error\n                   (if (= ?error :timeout)\n                     (when ?cb-fn (?cb-fn :chsk/timeout))\n                     (do\n                       (swap-chsk-state! chsk #(chsk-state->closed % :unexpected))\n                       (when ?cb-fn (?cb-fn :chsk/error))))\n\n                   (let [content ?content\n                         resp-ppstr content\n                         [resp-clj _] (unpack packer resp-ppstr)]\n                     (if ?cb-fn\n                       (?cb-fn resp-clj)\n                       (when (not= resp-clj :chsk/dummy-cb-200)\n                         (timbre/warnf \"Client :ajax cb reply w/o local cb-fn: %s\" resp-clj)))\n                     (swap-chsk-state! chsk #(assoc % :open? true))))))\n\n             :apparent-success))))\n\n     (-chsk-connect! [chsk]\n       (let [this-conn-id (reset! conn-id_ (enc/uuid-str))\n             own-conn?    (fn [] (= @conn-id_ this-conn-id))\n\n             poll-fn ; async-poll-for-update-fn\n             (fn poll-fn [retry-count]\n               (timbre/tracef \"Client :ajax async-poll-for-update!\")\n               (when (own-conn?)\n                 (let [retry-fn\n                       (fn []\n                         (when (and (own-conn?) (not @client-unloading?_))\n                           (let [retry-count* (inc retry-count)]\n                             (retry-connect-chsk! chsk backoff-ms-fn\n                               (fn connect-fn [] (poll-fn retry-count*))\n                               (do                        retry-count*)))))]\n\n                   (reset! curr-xhr_\n                     (ajax-call url\n                       (merge ajax-opts\n                         {:method     :get ; :timeout-ms timeout-ms\n                          :timeout-ms (or (:timeout-ms ajax-opts)\n                                        default-client-side-ajax-timeout-ms)\n                          :resp-type  :text ; Prefer to do our own pstr reading\n                          :xhr-cb-fn  (fn [xhr] (reset! curr-xhr_ xhr))\n                          :params\n                          (merge\n                            ;; Note that user params here are actually POST\n                            ;; params for convenience. Contrast: WebSocket\n                            ;; params sent as query params since there's no\n                            ;; other choice there.\n                            params ; 1st (don't clobber impl.):\n\n                            {:udt       (enc/now-udt) ; Force uncached resp\n                             :client-id client-id}\n\n                            ;; A truthy :handshake? param will prompt server to\n                            ;; reply immediately with a handshake response,\n                            ;; letting us confirm that our client<->server comms\n                            ;; are working:\n                            (when-not (:open? @state_) {:handshake? true}))\n\n                          :headers\n                          (merge\n                            (:headers ajax-opts) ; 1st (don't clobber impl.)\n                            {:X-CSRF-Token (get-client-csrf-token-str :dynamic\n                                             (:csrf-token @state_))})})\n\n                       (fn ajax-cb [{:keys [?error ?content]}]\n                         (if ?error\n                           (cond\n                             (= ?error :timeout) (poll-fn 0)\n                             ;; (= ?error :abort) ; Abort => intentional, not an error\n                             :else\n                             (do\n                               (swap-chsk-state! chsk #(chsk-state->closed % :unexpected))\n                               (retry-fn)))\n\n                           ;; The Ajax long-poller is used only for events, never cbs:\n                           (let [content ?content\n                                 ppstr content\n                                 [clj] (unpack packer ppstr)\n                                 handshake? (handshake? clj)]\n\n                             (when handshake?\n                               (receive-handshake! :ajax chsk clj))\n\n                             (swap-chsk-state! chsk #(assoc % :open? true))\n                             (poll-fn 0) ; Repoll asap\n\n                             (when-not handshake?\n                               (or\n                                 (when (= clj :chsk/timeout) :noop)\n                                 (let [buffered-evs clj] ; An application reply\n                                   (receive-buffered-evs! chs buffered-evs))))))))))))]\n\n         (poll-fn 0)\n         chsk))))\n\n#?(:cljs\n   (defn- new-ChAjaxSocket [opts csrf-token]\n     (map->ChAjaxSocket\n       (merge\n         {:state_        (atom {:type :ajax :open? false :ever-opened? false :csrf-token csrf-token})\n          :conn-id_      (atom nil)\n          :ever-opened?_ (atom false)\n          :curr-xhr_     (atom nil)}\n         opts))))\n\n#?(:cljs\n   (defrecord ChAutoSocket\n     ;; Dynamic WebSocket/Ajax IChSocket implementation\n     ;; Wraps a swappable ChWebSocket/ChAjaxSocket\n\n     [ws-chsk-opts ajax-chsk-opts state_\n      impl_ ; ChWebSocket or ChAjaxSocket\n      ]\n\n     IChSocket\n     (-chsk-break-connection! [chsk opts]   (when-let [impl @impl_] (-chsk-break-connection! impl opts)))\n     (-chsk-disconnect!       [chsk reason] (when-let [impl @impl_] (-chsk-disconnect!       impl reason)))\n     (-chsk-reconnect!        [chsk reason]\n       (-chsk-disconnect! chsk reason)\n       (-chsk-connect!    chsk))\n\n     (-chsk-send! [chsk ev opts]\n       (if-let [impl @impl_]\n         (-chsk-send! impl ev opts)\n         (let [{?cb :cb} opts\n               ?cb-fn (cb-chan-as-fn ?cb ev)]\n           (chsk-send->closed! ?cb-fn))))\n\n     (-chsk-connect! [chsk]\n       ;; Currently using a simplistic downgrade-only strategy.\n       ;; TODO Consider smarter strategy that can also upgrade?\n       (let [ajax-chsk-opts (assoc ajax-chsk-opts :state_ state_)\n             ws-chsk-opts   (assoc   ws-chsk-opts :state_ state_)\n\n             ajax-chsk!\n             (fn []\n               (let [ajax-chsk (new-ChAjaxSocket ajax-chsk-opts (:csrf-token @state_))]\n                 (remove-watch state_ :chsk/auto-ajax-downgrade)\n                 (-chsk-connect! ajax-chsk)))\n\n             ws-chsk!\n             (fn []\n               (let [ws-chsk (new-ChWebSocket ws-chsk-opts (:csrf-token @state_))\n                     downgraded?_ (atom false)]\n\n                 (add-watch state_ :chsk/auto-ajax-downgrade\n                   (fn [_ _ old-state new-state]\n                     (enc/when-let [state-changed? (not= old-state new-state)\n                                    impl           @impl_\n                                    ever-opened?_  (:ever-opened?_ impl)\n                                    never-opened?  (not @ever-opened?_)\n                                    ws-error       (:last-ws-error new-state)]\n\n                       (when (compare-and-set! downgraded?_ false true)\n                         (timbre/warnf \"Client permanently downgrading chsk mode: :auto -> :ajax\")\n                         (-chsk-disconnect! impl :downgrading-ws-to-ajax)\n                         (reset! impl_ (ajax-chsk!))))))\n\n                 (-chsk-connect! ws-chsk)))]\n\n         (reset! impl_ (or (ws-chsk!) (ajax-chsk!)))\n         chsk))))\n\n#?(:cljs\n   (defn- new-ChAutoSocket [opts csrf-token]\n     (map->ChAutoSocket\n       (merge\n         {:state_ (atom {:type :auto :open? false :ever-opened? false :csrf-token csrf-token})\n          :impl_  (atom nil)}\n         opts))))\n\n   (defn- get-chsk-url [protocol host path type]\n     (let [protocol (case protocol :http \"http:\" :https \"https:\" protocol)\n           protocol (have [:el #{\"http:\" \"https:\"}] protocol)\n           protocol (case type\n                      :ajax     protocol\n                      :ws (case protocol \"https:\" \"wss:\" \"http:\" \"ws:\"))]\n       (str protocol \"//\" (enc/path host path))))\n\n   (defn make-channel-socket-client!\n     \"Returns nil on failure, or a map with keys:\n       :ch-recv ; core.async channel to receive `event-msg`s (internal or from\n                ; clients). May `put!` (inject) arbitrary `event`s to this channel.\n       :send-fn ; (fn [event & [?timeout-ms ?cb-fn]]) for client>server send.\n       :state   ; Watchable, read-only (atom {:type _ :open? _ :uid _ :csrf-token _}).\n       :chsk    ; IChSocket implementer. You can usu. ignore this.\n\n     Required arguments:\n       path              ; Channel socket server route/path (typically `/chsk`)\n       ?csrf-token-or-fn ; CSRF string or (fn [])->string to match token expected by server.\n                         ; nil => server not expecting any CSRF token.\n\n     Common options:\n       :type           ; e/o #{:auto :ws :ajax}. You'll usually want the default (:auto).\n       :protocol       ; Server protocol, e/o #{:http :https}.\n       :host           ; Server host (defaults to current page's host).\n       :port           ; Server port (defaults to current page's port).\n       :params         ; Map of any params to incl. in chsk Ring requests (handy\n                       ; for application-level auth, etc.).\n       :headers        ; Map of additional headers to include in the initiating request\n                       ; (currently only for Java clients).\n       :packer         ; :edn (default), or an IPacker implementation.\n       :ajax-opts      ; Base opts map provided to `taoensso.encore/ajax-call`, see\n                       ; relevant docstring for more info.\n       :wrap-recv-evs? ; Should events from server be wrapped in [:chsk/recv _]?\n                       ; Default false for Sente >= v1.18, true otherwise.\n\n       :ws-kalive-ms       ; Ping to keep a WebSocket conn alive if no activity\n                           ; w/in given msecs. Should be different to server's :ws-kalive-ms.\n       :ws-ping-timeout-ms ; When pinging to test WebSocket connections, msecs to\n                           ; await reply before regarding the connection as broken\n\n       :ws-constructor ; Advanced, (fn [{:keys [uri-str headers on-message on-error on-close]}]\n                       ; => nil, or delay that can be dereffed to get a connected WebSocket.\n                       ; See `default-client-ws-constructor` code for details.\"\n\n     [path ?csrf-token-or-fn &\n      [{:as   opts\n        :keys [type protocol host port params headers recv-buf-or-n packer\n               ws-constructor ws-kalive-ms ws-ping-timeout-ms ws-opts\n               client-id ajax-opts wrap-recv-evs? backoff-ms-fn]\n\n        :or   {type           :auto\n               recv-buf-or-n  (async/sliding-buffer 2048) ; Mostly for buffered-evs\n               packer         :edn\n               client-id      (or (:client-uuid opts) ; Backwards compatibility\n                                  (enc/uuid-str))\n               wrap-recv-evs? false\n               backoff-ms-fn  enc/exp-backoff\n\n               ws-kalive-ms       20000\n               ws-ping-timeout-ms 5000\n               ws-constructor     default-client-ws-constructor}}\n\n       _deprecated-more-opts]]\n\n     (have? [:in #{:ajax :ws :auto}] type)\n     (have? enc/nblank-str? client-id)\n\n     (when (not (nil? _deprecated-more-opts)) (timbre/warnf \"`make-channel-socket-client!` fn signature CHANGED with Sente v0.10.0.\"))\n     (when (contains? opts :lp-timeout)       (timbre/warnf \":lp-timeout opt has CHANGED; please use :lp-timout-ms.\"))\n\n     ;; Check once now to trigger possible warning\n     (get-client-csrf-token-str true ?csrf-token-or-fn)\n\n     (let [packer (coerce-packer packer)\n\n           [ws-url ajax-url]\n           (let [;; Not available with React Native, etc.\n                 ;; Must always provide explicit path for Java client.\n                 win-loc  #?(:clj nil :cljs (enc/get-win-loc))\n                 path     (have (or path (:pathname win-loc)))]\n\n             (if-let [f (:chsk-url-fn opts)] ; Deprecated\n               [(f path win-loc :ws)\n                (f path win-loc :ajax)]\n\n               (let [protocol (or protocol (:protocol win-loc) :http)\n                     host\n                     (if host\n                       (if port (str host \":\" port) host)\n                       (if port\n                         (str (:hostname win-loc) \":\" port)\n                         (do  (:host     win-loc))))]\n\n                 [(get-chsk-url protocol host path :ws)\n                  (get-chsk-url protocol host path :ajax)])))\n\n           private-chs\n           {:internal (chan (async/sliding-buffer 128))\n            :state    (chan (async/sliding-buffer 10))\n            :<server\n            (let [;; Nb must be >= max expected buffered-evs size:\n                  buf (async/sliding-buffer 512)]\n              (if wrap-recv-evs?\n                (chan buf (map (fn [ev] [:chsk/recv ev])))\n                (chan buf)))}\n\n           ws-ping-timeout-ms\n           (cond\n             (contains? opts :ws-ping-timeout-ms)\n             (do   (get opts :ws-ping-timeout-ms))\n\n             (contains? opts :ws-kalive-ping-timeout-ms) ; Back compatibility\n             (do   (get opts :ws-kalive-ping-timeout-ms))\n\n             :else ws-ping-timeout-ms)\n\n           common-chsk-opts\n           {:client-id client-id\n            :chs       private-chs\n            :params    params\n            :headers   headers\n            :packer    packer\n            :ws-kalive-ms       ws-kalive-ms\n            :ws-ping-timeout-ms ws-ping-timeout-ms\n            :ws-constructor     default-client-ws-constructor}\n\n           ws-chsk-opts\n           (merge common-chsk-opts\n             {:url           ws-url\n              :backoff-ms-fn backoff-ms-fn\n              :ws-opts       ws-opts})\n\n           ajax-chsk-opts\n           (merge common-chsk-opts\n             {:url           ajax-url\n              :ajax-opts     ajax-opts\n              :backoff-ms-fn backoff-ms-fn})\n\n           auto-chsk-opts\n           {:ws-chsk-opts   ws-chsk-opts\n            :ajax-chsk-opts ajax-chsk-opts}\n\n           ?chsk\n           (-chsk-connect!\n             (case type\n               :ws      (new-ChWebSocket    ws-chsk-opts ?csrf-token-or-fn)\n               :ajax\n               #?(:cljs (new-ChAjaxSocket ajax-chsk-opts ?csrf-token-or-fn)\n                  :clj  (throw (UnsupportedOperationException.\n                                 \"Only :ws channel socket type supported for clj\")))\n               :auto\n               #?(:cljs (new-ChAutoSocket auto-chsk-opts ?csrf-token-or-fn)\n                  :clj  (throw (UnsupportedOperationException.\n                                 \"Only :ws channel socket type supported for clj\")))))]\n\n       (if-let [chsk ?chsk]\n         (let [chsk-state_ (:state_ chsk)\n               internal-ch (:internal private-chs)\n               send-fn (partial chsk-send! chsk)\n               ev-ch\n               (async/merge\n                 [(:internal private-chs)\n                  (:state    private-chs)\n                  (:<server  private-chs)]\n                 recv-buf-or-n)\n\n               ev-msg-ch\n               (async/chan 1\n                 (map\n                   (fn [ev]\n                     (let [[ev-id ev-?data :as ev] (as-event ev)]\n                       {;; Allow client to inject into router for handler:\n                        :ch-recv internal-ch\n                        :send-fn send-fn\n                        :state   chsk-state_\n                        :event   ev\n                        :id      ev-id\n                        :?data   ev-?data}))))]\n\n           (async/pipe ev-ch ev-msg-ch)\n\n           {:chsk    chsk\n            :ch-recv ev-msg-ch\n            :send-fn send-fn\n            :state   (:state_ chsk)})\n\n         (do\n           (timbre/warnf \"Client failed to create channel socket\")\n           nil))))\n\n;;;; Event-msg routers (handler loops)\n\n(defn- -start-chsk-router!\n  [server? ch-recv event-msg-handler opts]\n  (let [{:keys [trace-evs? error-handler simple-auto-threading?]} opts\n        ch-ctrl (chan)\n\n        execute1\n        #?(:cljs (fn [f] (f))\n           :clj\n           (if simple-auto-threading?\n             (fn [f] (future-call f))\n             (fn [f] (f))))]\n\n    (go-loop []\n      (let [[v p] (async/alts! [ch-recv ch-ctrl])\n            stop? (or (= p ch-ctrl) (nil? v))]\n\n        (when-not stop?\n          (let [{:as event-msg :keys [event]} v]\n\n            (execute1\n              (fn []\n                (enc/try*\n                  (when trace-evs? (timbre/tracef \"Chsk router pre-handler event: %s\" event))\n                  (event-msg-handler\n                    (if server?\n                      (have! server-event-msg? event-msg)\n                      (have! client-event-msg? event-msg)))\n\n                  (catch :all t1\n                    (enc/try*\n                      (if-let [eh error-handler]\n                        (error-handler  t1 event-msg)\n                        (timbre/errorf  t1 \"Chsk router `event-msg-handler` error: %s\" event))\n                      (catch :all t2\n                        (timbre/errorf  t2 \"Chsk router `error-handler` error: %s\"     event)))))))\n\n            (recur)))))\n\n    (fn stop! [] (async/close! ch-ctrl))))\n\n(defn start-server-chsk-router!\n  \"Creates a simple go-loop to call `(event-msg-handler <server-event-msg>)`\n  and log any errors. Returns a `(fn stop! [])`. Note that advanced users may\n  prefer to just write their own loop against `ch-recv`.\n\n  Nb performance note: since your `event-msg-handler` fn will be executed\n  within a simple go block, you'll want this fn to be ~non-blocking\n  (you'll especially want to avoid blocking IO) to avoid starving the\n  core.async thread pool under load. To avoid blocking, you can use futures,\n  agents, core.async, etc. as appropriate.\n\n  Or for simple automatic future-based threading of every request, enable\n  the `:simple-auto-threading?` opt (disabled by default).\"\n  [ch-recv event-msg-handler &\n   [{:as opts :keys [trace-evs? error-handler simple-auto-threading?]}]]\n  (-start-chsk-router! :server ch-recv event-msg-handler opts))\n\n(defn start-client-chsk-router!\n  \"Creates a simple go-loop to call `(event-msg-handler <server-event-msg>)`\n  and log any errors. Returns a `(fn stop! [])`. Note that advanced users may\n  prefer to just write their own loop against `ch-recv`.\n\n  Nb performance note: since your `event-msg-handler` fn will be executed\n  within a simple go block, you'll want this fn to be ~non-blocking\n  (you'll especially want to avoid blocking IO) to avoid starving the\n  core.async thread pool under load. To avoid blocking, you can use futures,\n  agents, core.async, etc. as appropriate.\"\n  [ch-recv event-msg-handler &\n   [{:as opts :keys [trace-evs? error-handler]}]]\n  (-start-chsk-router! (not :server) ch-recv event-msg-handler opts))\n\n;;;; Platform aliases\n\n(def event-msg? #?(:clj server-event-msg? :cljs client-event-msg?))\n\n(def make-channel-socket!\n  \"Platform-specific alias for `make-channel-socket-server!` or\n  `make-channel-socket-client!`. Please see the appropriate aliased fn\n   docstring for details.\"\n  #?(:clj  make-channel-socket-server!\n     :cljs make-channel-socket-client!))\n\n(def start-chsk-router!\n  \"Platform-specific alias for `start-server-chsk-router!` or\n  `start-client-chsk-router!`. Please see the appropriate aliased fn\n  docstring for details.\"\n  #?(:clj  start-server-chsk-router!\n     :cljs start-client-chsk-router!))\n\n;;;; Deprecated\n\n(enc/deprecated\n  #?(:clj\n     (defn ^:deprecated ^:no-doc start-chsk-router-loop!\n       \"DEPRECATED: Please use `start-chsk-router!` instead\"\n       [event-msg-handler ch-recv]\n       (start-server-chsk-router! ch-recv\n         ;; Old handler form: (fn [ev-msg ch-recv])\n         (fn [ev-msg] (event-msg-handler ev-msg (:ch-recv ev-msg))))))\n\n  #?(:cljs\n     (defn ^:deprecated ^:no-doc start-chsk-router-loop!\n       \"DEPRECATED: Please use `start-chsk-router!` instead\"\n       [event-handler ch-recv]\n       (start-client-chsk-router! ch-recv\n         ;; Old handler form: (fn [ev ch-recv])\n         (fn [ev-msg] (event-handler (:event ev-msg) (:ch-recv ev-msg))))))\n\n  (def ^:deprecated ^:no-doc set-logging-level! \"DEPRECATED. Please use `timbre/set-level!` instead\" timbre/set-level!)\n\n  #?(:cljs (def ^:deprecated ^:no-doc ajax-lite \"DEPRECATED: Please use `ajax-call` instead\" enc/ajax-call))\n  #?(:cljs\n     (def ^:deprecated ^:no-doc default-chsk-url-fn\n       (fn [path {:as location :keys [protocol host pathname]} websocket?]\n         (let [protocol\n               (if websocket?\n                 (if (= protocol \"https:\") \"wss:\" \"ws:\")\n                 protocol)]\n           (str protocol \"//\" host (or path pathname)))))))\n"],"x_google_ignoreList":[0]}