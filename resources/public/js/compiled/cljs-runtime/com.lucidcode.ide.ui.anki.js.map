{"version":3,"sources":["com/lucidcode/ide/ui/anki.cljs"],"mappings":"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","names":["com.lucidcode.ide.ui.anki/component-seq","js/Error","com.lucidcode.ide.ui.anki/next-in-seq","coll","current","cljs.core/sequential?","idx","cljs.core/count","cljs.core.nth","com.lucidcode.ide.ui.anki/default-db","com.lucidcode.ide.ui.anki/status-msg?","msg","cljs.core/contains?","com.lucidcode.ide.ui.anki/connect-websocket","ws","js/WebSocket","js/console.log","event","data","re-frame.core/dispatch","js/console.error","re_frame.core.reg_event_db","p__25549","vec__25550","db","_","cljs.tools.reader.edn.read_string","cljs.core/assoc-in","re-frame.core/reg-fx","p__25553","vec__25554","conn","message","cljs.core.pr_str","cljs.core.assoc","resp","cljs.core.println","p__25557","vec__25558","file","cljs.core.update","cljs.core/dissoc","re_frame.core.reg_event_fx","p__25561","map__25562","cljs.core/--destructure-map","cljs.core.get","body","G__25563","js/FormData","cljs.core.get_in","ajax.core/json-request-format","ajax.core/json-response-format","p__25564","vec__25565","deck-name","p__25568","vec__25569","map__25572","word-list","ask-for-email?","p1__25573#","re_frame.core.reg_sub","com.lucidcode.ide.ui.anki/step-annotator","i","n","com.lucidcode.ide.ui.anki/next-button","enabled?","on-click","cljs.core/not","com.lucidcode.ide.ui.anki/file-upload-component","file-upload","re_frame.core.subscribe","p1__25574#","p1__25575#","cljs.core/deref","and__5000__auto__","clojure.string/blank?","p__25576","vec__25577","word","cljs.core.update_in","words","cljs.core.map","p__25580","vec__25581","w","f","s","sel?","cljs.core._EQ_","p__25584","vec__25585","select-all?","cljs.core.mapv","p__25588","vec__25589","freq","usage","cljs.core/seq","p1__25592#","cljs.core/every?","p__25594","map__25595","p1__25593#","cljs.core.filter","p__25596","vec__25597","com.lucidcode.ide.ui.anki/word-item","frequency","sentence","selected?","clojure.string/capitalize","com.lucidcode.ide.ui.anki/word-frequency-component","all-selected?","iter__5480__auto__","s__25601","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","b__25603","cljs.core/chunk-buffer","i__25602","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__25600","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","word-data","p__25604","map__25605","com.lucidcode.ide.ui.anki/adding","com.lucidcode.ide.ui.anki/status-component","status","G__25606","cljs.core/Keyword","cljs.core.dissoc","p__25607","p__25608","map__25609","vec__25610","email","com.lucidcode.ide.ui.anki/ask-for-email","user-email","reagent.core.atom","p1__25613#","cljs.core/reset!","com.lucidcode.ide.ui.anki/app","curr-step","com.lucidcode.ide.ui.anki/start","reagent.dom.render","js/document","com.lucidcode.ide.ui.anki/init!","re-frame.core/dispatch-sync","cljs.core/chunk-first"],"sourcesContent":["(ns com.lucidcode.ide.ui.anki\n  (:require [re-frame.core :as rf]\n   [reagent.core :as r]\n   [ajax.core :as ajax]\n   [day8.re-frame.http-fx]\n   [reagent.dom :as rdom]\n   [clojure.string :as str]\n   [clojure.core.async :as async]\n   [clojure.tools.reader.edn :as edn]))\n\n\n\n(def component-seq [:file-upload :select-word :adding-words])\n\n(defn next-in-seq [coll current]\n  {:pre [(sequential? coll)]}\n  (let [idx (.indexOf coll current)]\n    (if (or (neg? idx) (>= idx (dec (count coll))))\n      nil ;; Return nil if current is not found or is the last element\n      (nth coll (inc idx))))) \n\n(def default-db\n  {:current-component :file-upload\n   :file-upload {:error nil\n                 :file nil}})\n\n(defn status-msg? [msg]\n  (contains? #{:login-required :done} msg))\n\n;; Initialize WebSocket connection\n\n(defn connect-websocket []\n  (let [ws (js/WebSocket. \"ws://localhost:8080/ws\")]\n    (set! (.-onopen ws) (fn [] \n                          (js/console.log \"WebSocket connected\")\n                          (.send ws \"pong\")))\n    (set! (.-onmessage ws)\n      (fn [event]\n        (let [data (.-data event)]\n          ;; Dispatch received data to an event\n          (rf/dispatch [:ws/message-received data]))))\n    (set! (.-onclose ws) #(js/console.log \"WebSocket closed\"))\n    (set! (.-onerror ws) #(js/console.error \"WebSocket error\"))\n    ws))\n\n\n(rf/reg-event-db\n  :ws/message-received\n  (fn [db [_ msg]]\n    (let [msg (edn/read-string msg)]\n      (if (status-msg? msg)\n        (assoc-in db [:status] msg)\n        db))))\n\n;; Send message\n(rf/reg-fx :ws/send-message\n  (fn [[conn message]]\n    (when conn\n      (.send conn (pr-str message)))))\n\n;; events\n(rf/reg-event-db \n  ::initialize-db\n  (fn [_ _]\n    (let [ws (connect-websocket)]\n      (assoc default-db :ws ws))))\n\n(rf/reg-event-db\n  ::http-error \n  (fn [db resp]\n    (println resp)\n    db))\n\n(rf/reg-event-db\n  :upload/set-file\n  (fn [db [_ file]]\n    (if (.endsWith (.-name file) \".epub\")\n      (-> db \n        (assoc-in [:file-upload :file] file)\n        (update :file-upload dissoc :error))\n      (-> db \n        (assoc-in [:file-upload :error] \"Only .epub files are allowed.\")\n        (update :file-upload dissoc :file)))))\n\n(rf/reg-event-fx\n  :upload/parse-book\n  (fn [{:keys [db]} _]\n    (let [body (doto (js/FormData.)\n                 (.append \"file\" (get-in db [:file-upload :file])))]\n      {:http-xhrio {:method :post \n                    :uri \"/parse-book\"\n                    :body body\n                    :format (ajax/json-request-format)\n                    :response-format (ajax/json-response-format {:keywords? true}) \n                    :on-success [::on-parse-book]\n                    :on-failure [::http-error]}})))\n\n(rf/reg-event-db\n  :upload/set-deck-name\n  (fn [db [_ deck-name]]\n    (assoc-in db [:file-upload :deck-name] deck-name)))\n\n(rf/reg-event-db\n  ::on-parse-book \n  (fn [db [_ {:keys [word-list ask-for-email?]}]]\n    (-> db \n      (assoc :word-list word-list)\n      (assoc :ask-for-email? ask-for-email?))))\n\n\n(rf/reg-event-db \n  ::next-component\n  (fn [db _]\n    (update db :current-component #(next-in-seq component-seq %))))\n\n;; subs\n(rf/reg-sub\n  :file-upload\n  (fn [db _]\n    (:file-upload db)))\n\n(defn step-annotator [i n] \n  [:div.w-full.py-4.px-6\n   [:div.max-w-4xl.mx-auto.text-center\n    [:p.text-sm.font-medium.text-gray-600 (str \"Step: \" i \"/\" n)]]])\n\n(defn next-button [enabled? on-click]\n  [:div.flex.justify-end.mt-4\n   [:button.py-2.px-8.rounded-md.text-white.font-medium\n    {:class (if enabled?\n              \"bg-blue-600 hover:bg-blue-700\"\n              \"bg-gray-300 cursor-not-allowed\")\n     :disabled (not enabled?)\n     :on-click #(when enabled? \n                  (rf/dispatch [::next-component])\n                  (on-click))}\n    \"Next\"]])\n\n(rf/reg-sub\n  ::deck-name \n  (fn [db _]\n    (get-in db [:file-upload :deck-name])))\n\n(defn file-upload-component []\n  (let [file-upload (rf/subscribe [:file-upload])\n        deck-name (rf/subscribe [::deck-name])]\n    (fn []\n      [:div.pt-16.pb-24.mx-auto\n       [:div.rounded-lg.p-8.w-full.min-w-md.max-w-lg.border.bg-white.shadow-sm\n        ;; Title Section\n        [:div.text-center.mb-8\n         [:h2.text-xl.font-semibold.text-gray-700.mb-2 \"Select EPUB File\"]\n         #_[:p.text-gray-600 \"Choose an EPUB file from your computer\"]]\n         \n        ;; Upload Section\n        [:div.space-y-6\n         [:div.flex.space-x-8\n          [:label.block.text-sm.font-medium.text-gray-700.inline-flex.items-center \"Deck Name\"]\n          [:input.block.text-sm.text-gray-500.mt-1.px-4.py-2.border.rounded-md.shadow-sm\n           {:type \"text\"\n            :placeholder \"Enter deck name\"\n            :on-change #(rf/dispatch [:upload/set-deck-name (-> % .-target .-value)])}]]\n\n         ;; File Input\n         [:div.relative\n          [:input.block.w-full.text-sm.text-gray-500.file:mr-4.file:py-2.file:px-4.file:rounded-md.file:border-1\n           {:type \"file\"\n            :accept \".epub\"\n            :on-change #(let [file (-> % .-target .-files (aget 0))]\n                          (rf/dispatch [:upload/set-file file]))}]]\n          \n         ;; Error Message\n         (when (:error @file-upload)\n           [:p.text-sm.text-red-500.mt-2.max-w-lg (:error @file-upload)])]]\n       [next-button (and (:file @file-upload)\n                      (not (str/blank? @deck-name)))\n        #(rf/dispatch [:upload/parse-book])]])))\n\n;; word list\n(rf/reg-sub\n  :word-list\n  (fn [db]\n    (:word-list db)))\n\n(rf/reg-event-db\n  :toggle-word\n  (fn [db [_ word]]\n    (update-in db [:word-list]\n      (fn [words]\n        (map (fn [[w f s sel?]]\n               (if (= w word)\n                 [w f s (not sel?)]\n                 [w f s sel?]))\n          words)))))\n\n(rf/reg-event-db\n  :select-all-words\n  (fn [db [_ select-all?]]\n    (update db :word-list (fn [word-list]\n                            (mapv (fn [[word freq usage _]] \n                                    [word freq usage select-all?])\n                              word-list)))))\n\n(rf/reg-sub\n  :all-selected?\n  (fn [db _]\n    (and (seq (:word-list db))\n      (every? #(get % 3) (:word-list db)))))\n\n(rf/reg-event-fx\n  ::add-words-to-anki\n  (fn [{:keys [db]} _]\n    (let [words (filter #(get % 3) (:word-list db))]\n      {:http-xhrio {:method :post \n                    :uri \"/add-words-to-anki\"\n                    :params {:deck-name (-> db \n                                          (get-in [:file-upload :deck-name])) \n                             :words words}\n                    :format (ajax/json-request-format)\n                    :response-format (ajax/json-response-format {:keywords? true}) \n                    :on-success [::on-start-adding-to-anki]\n                    :on-failure [::http-error]}})))\n\n(rf/reg-event-db\n  ::on-start-adding-to-anki\n  (fn [db _]\n    (assoc db :status :adding)))\n\n\n(defn word-item [[word frequency sentence  selected?]]\n  [:div.flex.flex-col.py-3.px-4.hover:bg-gray-50.transition-colors\n   {:on-click #(rf/dispatch [:toggle-word word])}\n   \n   ;; Word and Frequency Row\n   [:div.flex.items-center.justify-between.cursor-pointer\n    [:div.flex.items-center.space-x-3\n     ;; Checkbox\n     [:div.w-5.h-5.border.rounded\n      {:class (if selected? \n                \"bg-blue-600 border-blue-600\"\n                \"border-gray-300\")}\n      (when selected?\n        [:svg.w-4.h-4.text-white.mx-auto.mt-0.5\n         {:viewBox \"0 0 20 20\" :fill \"currentColor\"}\n         [:path {:fill-rule \"evenodd\"\n                 :d \"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                 :clip-rule \"evenodd\"}]])]\n     ;; Word\n     [:span.text-gray-700.font-medium (str/capitalize word)]]\n    ;; Frequency\n    [:span.text-gray-500.text-sm (str \"(\" frequency \")\")]]\n   \n   ;; Usage Example\n   [:div.mt-2.pl-8\n    [:p.text-sm.text-gray-600.italic sentence]]])\n\n(defn word-frequency-component []\n  (let [words @(rf/subscribe [:word-list])\n        all-selected? (rf/subscribe [:all-selected?])]\n    ;; Main Content\n    [:div.w-full.max-w-2xl.px-4.py-6.mx-auto\n     [:div.w-full.bg-white.rounded-lg.border.border-gray-200\n      ;; Header\n      [:div.px-4.py-5.border-b.border-gray-200.flex.justify-between.space-x-4\n       [:div \n        [:h2.text-lg.font-medium.text-gray-700 \"Select words\"]\n        [:p.mt-1.text-sm.text-gray-500 \n         \"Each word has an example and its first occurence.\"]]\n       [:div.mt-4.flex.justify-end\n        [:button.bg-blue-500.text-white.rounded-md.px-3.py-1.shadow.hover:bg-blue-600\n         {:on-click #(rf/dispatch [:select-all-words (not @all-selected?)])}\n         (if @all-selected? \"Deselect All\" \"Select All\")]]]\n       \n      ;; Word List\n      [:div.divide-y.divide-gray-200\n       (for [word-data words]\n         ^{:key (first word-data)}\n         [word-item word-data])]]\n     [next-button true #(rf/dispatch [::add-words-to-anki])]]))\n\n(rf/reg-event-fx\n  ::continue-flow \n  (fn [{:keys [db]} _]\n    {:db (assoc db :status :adding)\n     :ws/send-message [(get-in db [:ws]) {:topic :flow :msg :continue}]}))\n\n(rf/reg-sub\n  ::status \n  (fn [db _]\n    (get-in db [:status])))\n\n(defn- adding []\n  [:div.flex.items-center\n    [:svg.animate-spin.h-6.w-6.text-blue-500\n     {:xmlns \"http://www.w3.org/2000/svg\" \n      :fill \"none\" \n      :viewBox \"0 0 24 24\" \n      :stroke \"currentColor\"}\n     [:circle {:cx \"12\" :cy \"12\" :r \"10\" :stroke-width \"4\" :stroke \"currentColor\" :fill \"none\"}]\n     [:path {:fill \"currentColor\" :d \"M4 12a8 8 0 0116 0H4z\"}]]\n    [:span.ml-2.text-blue-500 \"Adding...\"]])\n\n(defn status-component []\n  (let [status @(rf/subscribe [::status])]\n    [:div.w-full.max-w-2xl.px-4.py-6.mx-auto\n     [:div.w-full.bg-white.rounded-lg.border.border-gray-200\n      ;; Status Indicator\n      [:div.flex.items-center.justify-center.my-4.p-8\n       (case status\n         :adding [adding]\n         :login-required [:div.flex.flex-col.items-center.gap-4\n                          [:div.text-gray-600 \"Please login in anki. Then click continue\"]\n                          [:button.px-4.py-2.bg-blue-500.text-white.rounded-md.hover:bg-blue-600.transition-colors.mt-8\n                           {:on-click #(rf/dispatch [::continue-flow])}\n                           \"Continue\"]]\n         :done [:div.flex.items-center\n                [:svg.h-6.w-6.text-green-500\n                 {:xmlns \"http://www.w3.org/2000/svg\" \n                  :viewBox \"0 0 20 20\" \n                  :fill \"currentColor\"}\n                 [:path {:fill-rule \"evenodd\" :d \"M16.707 5.293a1 1 0 00-1.414 0L7 13.586l-3.293-3.293a1 1 0 00-1.414 1.414l4 4a1 1 0 001.414 0l9-9a1 1 0 000-1.414z\" :clip-rule \"evenodd\"}]]\n                [:span.ml-2.text-green-500 \"Added\"]]\n         [adding]\n         )]]]))\n\n(rf/reg-event-db\n  ::skip-email\n  (fn [db _]\n    (dissoc db :ask-for-email?)))\n\n(rf/reg-event-fx\n  ::save-user-email\n  (fn [{:keys [db]} [_ email]]\n    {:http-xhrio {:method :post \n                  :uri \"/save-user-email\"\n                  :params {:email email}\n                  :format (ajax/json-request-format)\n                  :response-format (ajax/json-response-format {:keywords? true}) \n                  :on-success [::on-save-user-email]\n                  :on-failure [::http-error]}\n     :db (dissoc db :ask-for-email?)}))\n\n(rf/reg-event-db\n  ::on-save-user-email\n  (fn [db _]\n    db))\n\n(defn ask-for-email []\n  (let [user-email (r/atom \"\")]\n    (fn []\n      [:div.pt-16.pb-24.mx-auto\n       [:div.rounded-lg.p-8.w-full.min-w-md.max-w-lg.border.bg-white.shadow-sm\n        ;; Title Section\n        [:div.mb-8\n         [:h3.text-lg.font-semibold.text-gray-700.mb-4.text-center \"Please enter your email\"]\n         [:p.text-sm.text-left.text-gray-700 \"We will update you when a new version of the app is availble with new features, bug fixes etc.\"]]\n    \n        ;; Input Section\n        [:div.space-y-6\n         [:div.flex.space-x-4.items-center\n          [:label.block.text-sm.font-medium.text-gray-700 \"Email\"]\n          [:input.block.text-sm.text-gray-500.mt-1.px-4.py-2.border.rounded-md.shadow-sm.w-full\n           {:type \"email\"\n            :value @user-email\n            :placeholder \"Enter your email\"\n            :on-change #(reset! user-email (-> % .-target .-value))}]]]\n    \n        ;; Button Section\n        [:div.flex.justify-between.space-x-4.mt-8\n         [:button.px-4.py-2.text-gray-500.text-sm.font-medium.underline.cursor-pointer\n          {:on-click #(rf/dispatch [::skip-email])}\n          \"Skip\"]\n         [:button.px-4.py-2.bg-blue-600.text-white.rounded-md.shadow-sm.cursor-pointer.hover:bg-blue-700\n          {:on-click #(rf/dispatch [::save-user-email @user-email])}\n      \n          \"Next\"]]]])))\n\n(rf/reg-sub\n  ::curr-component-id\n  (fn [db _]\n    (get-in db [:current-component])))\n\n(rf/reg-sub\n  ::ask-for-email?\n  (fn [db _]\n    (get-in db [:ask-for-email?])))\n\n(defn app []\n  (let [curr-step (rf/subscribe [::curr-component-id])\n        ask-for-email? (rf/subscribe [::ask-for-email?])]\n    (fn []\n      (println [@curr-step (.indexOf component-seq @curr-step)])\n      [:div.min-h-screen.flex.flex-col\n       [step-annotator (inc (.indexOf component-seq @curr-step)) (count component-seq)]\n       (cond \n         (= @curr-step :file-upload) [file-upload-component]\n         (deref ask-for-email?) [ask-for-email]\n         (= @curr-step :select-word) [word-frequency-component] \n         (= @curr-step :adding-words) [status-component])])))\n\n(defn ^:dev/after-load start []\n  #_(re-frame/clear-subscription-cache!)\n  (rdom/render [app] (.getElementById js/document \"app\")))\n\n\n(defn init! []\n  (rf/dispatch-sync [::initialize-db])\n  (start))\n\n"]}